package administracion.action;import ingreso.control.gstentrada;import ingreso.entity.entrada;import java.io.IOException;import java.math.BigDecimal;import javax.servlet.ServletException;import java.sql.SQLException; import org.apache.struts.action.ActionMessage;  import org.apache.struts.action.ActionMessages; import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.*;import org.apache.struts.action.*;import db.beanConnector;import util.Fecha;import administracion.control.gstajuste;import administracion.entity.ajuste;import administracion.form.ajusteForm;  public final class ajusteAction  extends Action{
			 public ActionForward execute(ActionMapping mapping,	ActionForm form, 			HttpServletRequest request,	HttpServletResponse response)			throws IOException, ServletException {
ajusteForm _form = (ajusteForm)form;  gstajuste control = new gstajuste(); String opcion = request.getParameter("opcion");  opcion = opcion==null || ( opcion!=null && opcion.equals("")) ? "crear" : opcion; 
 String mensaje = "";  String destino = ""; //OPCION DE set:  if(opcion.equals("set")) {  ajuste entity = control.getajuste(request.getParameter("codsx")); ajusteForm  temp  = new ajusteForm();  temp.setopcion("update"); temp.llenar(entity);  request.setAttribute("ajusteForm", temp);  destino = "ajuste_datos";  }  //opcion de CREAR  if(opcion.equals("crear")) {  String ajcodcia = _form.getajcodcia();   String ajingreso = _form.getajingreso();   String ajentrada = _form.getajentrada();   String ajfecha = Fecha.getFecha();   String ajsaldoant_nac = _form.getajsaldoant_nac();   String ajnuevosaldo_nac = _form.getajnuevosaldo_nac();   String ajsaldoant_nnac = _form.getajsaldoant_nnac();   String ajnuevosaldo_nnac = _form.getajnuevosaldo_nnac();   destino = "ajuste";   BigDecimal ajsaldoant_nac_ = new BigDecimal(ajsaldoant_nac);   BigDecimal ajnuevosaldo_nac_ = new BigDecimal(ajnuevosaldo_nac);   BigDecimal ajsaldoant_nnac_ = new BigDecimal(ajsaldoant_nnac);   BigDecimal ajnuevosaldo_nnac_ = new BigDecimal(ajnuevosaldo_nnac); //si son iguales ambos saldos, no hago nada: if(ajnuevosaldo_nac_.compareTo(ajsaldoant_nac_)==0 && ajnuevosaldo_nnac_.compareTo(ajsaldoant_nnac_)==0)	 mensaje = "LOS VALORES DEL NUEVO AJUSTE NO PUEDEN SER IGUALES, PUESTO QUE NO ESTARIA HACIENDO NADA"; else {	 BigDecimal aj_pos_nac = new BigDecimal("0"); 	 BigDecimal aj_neg_nac = new BigDecimal("0");	 BigDecimal aj_pos_nnac = new BigDecimal("0");	 BigDecimal aj_neg_nnac= new BigDecimal("0"); if(ajnuevosaldo_nac_.compareTo(ajsaldoant_nac_)==1) {	 //el nuevo es mayor, el ajuste es positivo:	aj_pos_nac =  ajnuevosaldo_nac_.subtract( ajsaldoant_nac_); }else aj_neg_nac =  ajsaldoant_nac_.subtract(ajnuevosaldo_nac_); if(ajnuevosaldo_nnac_.compareTo(ajsaldoant_nnac_)==1) {	 //el nuevo es mayor, el ajuste es positivo:	aj_pos_nnac =  ajnuevosaldo_nnac_.subtract( ajsaldoant_nnac_); }else aj_neg_nnac =  ajsaldoant_nnac_.subtract(ajnuevosaldo_nnac_); //UN ajuste toma un saldo y fija el saldo nacionalizado o sin nacionalizar a un valor cualquiera... positivo //debo actualizar el saldo de la entrada a este saldo... //el saldo es con reservas... es decir que si hay algo reservado, y el ajusta, lo de las reservas no se modifica beanConnector db = new beanConnector(false); gstentrada gent = new gstentrada(db); control = new gstajuste(db);  entrada ent = gent.getentrada(ajentrada);  ent.setentsaldonac(ajnuevosaldo_nac); ent.setentsaldosinnac(ajnuevosaldo_nnac ); boolean resp = true;  try {	 resp &= gent.updateentrada(ent);	 resp &= control.crearajuste(ajcodcia,ajingreso,ajentrada,ajfecha, 		 ajsaldoant_nac,ajnuevosaldo_nac,ajsaldoant_nnac,ajnuevosaldo_nnac, 		 aj_pos_nac.toPlainString() ,	 aj_neg_nac.toPlainString() ,		 aj_pos_nnac.toPlainString() , 		 aj_neg_nnac.toPlainString(), _form.getAjobservacion());	  mensaje = "ajuste Creado con Exito";    } catch (SQLException e) {   e.printStackTrace();  mensaje = "No se pudo Crear el ajuste: <br> " + e.getLocalizedMessage();   }   if(resp) db.commit();  else db.rollback();   } }  // Opcion de update  if(opcion.equals("update")) { //  try {  destino = "ajuste_datos";  // control.updateajuste(_form);   mensaje = "UN AJUSTE NO PUEDE SER MODIFICADO";   // } catch (SQLException e) { e.printStackTrace();  // mensaje = "No se pudo Actualizar el ajuste: <br> " + e.getLocalizedMessage();  //}    }  // Opcion de eliminar: un ajuste no se elimina  if(opcion.equals("delete")) {  destino = "ajuste";     mensaje = "UN AJUSTE NO PUEDE SER ELIMINADO";   }   ActionMessages e = getErrors(request);  e.add("general", new ActionMessage(mensaje, false)); addErrors(request, e);  return mapping.findForward(destino);    } }