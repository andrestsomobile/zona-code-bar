package pedido.action;import java.io.IOException;import java.math.BigDecimal;import java.sql.SQLException;import java.util.Collection;import java.util.Iterator;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import maestro.control.gstdepartamento;import nacionalizacion.entity.nacionalizacion;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import administracion.entity.usuario;import pedido.control.gestionSaldos;import pedido.control.gstdespacho_pedido;import pedido.control.gstpedido;import pedido.control.gstpicking;import pedido.control.gstreferencia_pedido;import pedido.entity.pedido;import pedido.entity.picking;import pedido.entity.referencia_pedido;import pedido.form.pedidoForm;import util.Fecha;import util.Math;import db.beanConnector;public final class pedidoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		usuario usu = (usuario) request.getSession().getAttribute("usuario");		pedidoForm _form = (pedidoForm) form;		gstpedido control = new gstpedido();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String mensaje = "";		String destino = "";		// opcion de fijar la fecha sistema:		if (opcion.equals("fijar_fechasis")) {			destino = "pedido_datos";			pedido entity = control.getpedido(request.getParameter("pedcodsx"));			try {				String antes = entity.getpedfechasistema();				entity.setpedfechasistema(request.getParameter("pedfechasistema"));				control.updatepedido(entity);				String despues = request.getParameter("pedfechasistema");				control.crea_auditoria(entity.getpedcodsx(), "MODIFICAR FECHA", usu.getusucodsx(), antes, despues);							} catch (SQLException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}			pedidoForm temp = new pedidoForm();			temp.llenar(entity);			temp.setopcion("update");			request.setAttribute("pedidoForm", temp);		}		// opcion de fijar la observacion:		if (opcion.equals("fijar_observacion")) {			destino = "pedido_datos";			pedido entity = control.getpedido(request.getParameter("pedcodsx"));			try {				String antes = entity.getpedobservaciones();				entity.setpedobservaciones(request.getParameter("pedobservaciones"));				control.updatepedido(entity);				String despues = entity.getpedobservaciones();				control.crea_auditoria(entity.getpedcodsx(), "MODIFICAR OBSERVACION", usu.getusucodsx(), antes, despues);							} catch (SQLException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}			pedidoForm temp = new pedidoForm();			temp.llenar(entity);			temp.setopcion("update");			request.setAttribute("pedidoForm", temp);		}						// opcion de fijar la factura:		if (opcion.equals("fijar_factura")) {			destino = "pedido_datos";			pedido entity = control.getpedido(request.getParameter("pedcodsx"));			try {				String antes = entity.getpedfactura();				entity.setpedfactura(request.getParameter("pedfactura"));				control.updatepedido(entity);				String despues = entity.getpedfactura();				control.crea_auditoria(entity.getpedcodsx(), "MODIFICAR FACTURA", usu.getusucodsx(), antes, despues);							} catch (SQLException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}			pedidoForm temp = new pedidoForm();			temp.llenar(entity);			temp.setopcion("update");			request.setAttribute("pedidoForm", temp);		}		// opcion de cambiar transportadora:		if (opcion.equals("cambiar_transportadora")) {			destino = "pedido_datos";			pedido entity = control.getpedido(request.getParameter("pedcodsx"));			try {				String antes = entity.getPedtransportadora();				entity.setPedtransportadora(request.getParameter("pedtransportadora"));				control.updatepedido(entity);				String despues = entity.getPedtransportadora();				control.crea_auditoria(entity.getpedcodsx(), "MODIFICAR TRANSPORTADORA", usu.getusucodsx(), antes, despues);			} catch (SQLException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}			pedidoForm temp = new pedidoForm();			temp.llenar(entity);			temp.setopcion("update");			request.setAttribute("pedidoForm", temp);		}		// OPCION DE ACTIVAR UN PEDIDO:		if (opcion.equals("activar")) {			pedido entity = control.getpedido(request.getParameter("pedcodsx"));			pedidoForm temp = new pedidoForm();			// miro que no hayan despachos:			gstdespacho_pedido gdesp_ped = new gstdespacho_pedido();			Collection despachos = gdesp_ped.getlistadespacho_pedidoByPedido(entity.getpedcodsx());			destino = "pedido";			if (!despachos.isEmpty()) {				mensaje = "NO PUEDE ACTIVAR UN PEDIDO SI TIENE DESPACHOS, REVISE LOS DESPACHOS";			} else {				mensaje = "PEDIDO ACTIVADO CON EXITO";				entity.setpedestado("TRAMITE");				try {					String antes = entity.getResumen();					control.updatepedido(entity);					String despues = control.getpedido(entity.getpedcodsx()).getResumen();					control.crea_auditoria(entity.getpedcodsx(), "ACTIVAR", usu.getusucodsx(), antes, despues);				} catch (SQLException e1) {					mensaje = "NO SE PUDO ACTIVAR EL PEDIDO <BR>" + e1.getMessage();					e1.printStackTrace();				}			}		}		// OPCION DE set:		if (opcion.equals("set")) {			pedido entity = control.getpedido(request.getParameter("pedcodsx"));			pedidoForm temp = new pedidoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("pedidoForm", temp);			return mapping.findForward("pedido_datos");		}		// opcion de CREAR		if (opcion.equals("crear")) {			String pedcompania = _form.getpedcompania();			String pednumpedido = _form.getpednumpedido();			String pedordencompra = _form.getpedordencompra();			String pedguia = _form.getpedguia();			String pedfechasistema = _form.getpedfechasistema();			String pedfecha = _form.getpedfecha();			String pedfechavenc = _form.getpedfechavenc();			String pedfechacita = _form.getpedfechacita();			String pedhoracita = _form.getpedhoracita();			String pedcliente = _form.getpedcliente();			String pedsucursal = _form.getpedsucursal();			String peddireccion = _form.getpeddireccion();			String pedciudad = _form.getpedciudad();			String peddepartamento = _form.getpeddepartamento();			String pedobservaciones = _form.getpedobservaciones();			String pedfactura = _form.getpedfactura();			String pedestado = _form.getpedestado();			String pedsubtotal = "0";			String pediva = "0";			String peddescuento = "0";			String pedtotal = "0";			String pedtipo = _form.getPedtipo();			String pedtransportadora = _form.getPedtransportadora();			String pedfechaalistamiento = _form.getPedfechaalistamiento();			String pedfechadespacho = _form.getPedfechadespacho();			String pedfechaentrega = _form.getPedfechaentrega();			destino = "pedido_datos";			String pedpicking = _form.getPedpicking();			System.out.println("---->" + pedpicking);			String pedhora = Fecha.getHora();			gstdepartamento gdep = new gstdepartamento();			String pedzona = gdep.getdepartamento(peddepartamento).getdepzona();			String pedcausal_hit = _form.getPedcausal_hit();			String pedporc_iva = _form.getPedporc_iva();						beanConnector db = new beanConnector(false);			gstpedido gped = new gstpedido(db);			gestionSaldos gsaldo = new gestionSaldos();			gstpicking gpick = new gstpicking(db);			boolean resp = true;			try {				resp &= gped.crearpedido(pedcompania, pednumpedido, pedordencompra, pedguia, pedfechasistema, pedfecha, pedfechavenc, pedfechacita, pedhoracita, pedcliente, pedsucursal, peddireccion, pedciudad, peddepartamento, pedobservaciones, pedfactura, pedestado, pedsubtotal, pediva,						peddescuento, pedtotal, pedtipo, pedpicking, pedhora, pedzona, pedcausal_hit, pedporc_iva, pedtransportadora, pedfechaalistamiento, pedfechadespacho, pedfechaentrega);				pedido ped = gped.getpedido(pedcompania, pednumpedido);				// si viene de un picking:				if (pedpicking != null && !pedpicking.equals("")) {					resp &= gsaldo.crearReferenciasPedidoByPicking(ped.getpedcodsx(), pedpicking, db);					ped = gped.getpedido(pedcompania, pednumpedido);					_form.setpedsubtotal(ped.getpedsubtotal());					BigDecimal valor_iva = Math.dividir_bigdecimal(Math.multiplicar_bigdecimnal(ped.getpedsubtotal(), _form.getPedporc_iva()).toPlainString(), "100");					pediva = valor_iva.toPlainString();					// actualizo el numero del pedido en el picking:					picking pick = gpick.getpicking(pedpicking);					pick.setPickpedido(ped.getpedcodsx());					gpick.updatepicking(pick);					ped.setpediva(pediva);					ped.setpedtotal(Math.sumar(pediva, ped.getpedsubtotal()));					gped.updatepedido(ped);				}				_form.setpediva(pediva);				_form.setpedtotal(Math.sumar(pediva, _form.getpedsubtotal()));				pedidoForm pedf = (pedidoForm) request.getAttribute("pedidoForm");				pedf.llenar(ped);				pedf.setopcion("update");				request.setAttribute("pedidoForm", pedf);				control.crea_auditoria(ped.getpedcodsx(), "CREAR", usu.getusucodsx(), "", ped.getResumen());				mensaje = "pedido Creado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el pedido: <br> " + e.getLocalizedMessage();			}			if (resp)				db.commit();			else				db.rollback();		}		// Opcion de update		if (opcion.equals("update")) {			try {				destino = "pedido_datos";				BigDecimal valor_iva = Math.dividir_bigdecimal(Math.multiplicar_bigdecimnal(_form.getpedsubtotal(), _form.getPedporc_iva()).toPlainString(), "100");				String iva = valor_iva.toPlainString();				_form.setpediva(iva);				_form.setpedtotal(Math.sumar(iva, _form.getpedsubtotal()));                pedido entity = control.getpedido(_form.getpedcodsx());				String antes = entity.getResumen();				control.updatepedido(_form);				String despues = control.getpedido(entity.getpedcodsx()).getResumen();				control.crea_auditoria(entity.getpedcodsx(), "MODIFICAR", usu.getusucodsx(), antes, despues);				mensaje = "pedido Actualizado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el pedido: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			// antes de borrar el pedido, le borro todos sus items por aki:			beanConnector db = new beanConnector(false);			gstreferencia_pedido grefp = new gstreferencia_pedido(db);			gstpedido gped = new gstpedido(db);			boolean resp = true;			Collection l = grefp.getlistareferencia_pedido(request.getParameter("codsx"));			Iterator ite = l.iterator();			while (ite.hasNext()) {				referencia_pedido refp = (referencia_pedido) ite.next();				try {					resp &= grefp.eliminar(refp.getrefpcodsx());				} catch (SQLException e1) {					resp = false;					e1.printStackTrace();				}			}			String codsx = request.getParameter("codsx");			pedido antes = control.getpedido(codsx);						destino = "pedido";			try {				if (resp) {					gped.eliminar(codsx);					gped.crea_auditoria(codsx, "ELIMINAR", usu.getusucodsx(), antes.getResumen(), "");				}				mensaje = "pedido Eliminado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el pedido: <br> " + e.getLocalizedMessage();			}			if (resp)				db.commit();			else				db.rollback();		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}