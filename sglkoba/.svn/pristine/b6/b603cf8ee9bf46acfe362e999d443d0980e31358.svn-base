package ingreso.action;import java.io.IOException;import java.math.BigDecimal;import java.sql.SQLException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import ingreso.control.gstentrada;import ingreso.control.gstingreso;import ingreso.entity.entrada;import ingreso.entity.ingreso;import ingreso.form.entradaForm;import ingreso.form.ingresoForm;import maestro.control.gstconfig_bodega;public final class entradaAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		entradaForm _form = (entradaForm) form;		gstentrada control = new gstentrada();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		// OPCION DE set:		if (opcion.equals("set")) {			entrada entity = control.getentrada(request.getParameter("codsx"));			entradaForm temp = new entradaForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("ingcodsx", request.getParameter("ingcodsx"));			request.setAttribute("entradaForm", temp);			return mapping.findForward("entrada_datos");		}		ingreso entity = null;		gstingreso ging = new gstingreso();		String mensaje = "";		// opcion de CREAR		if (opcion.equals("crear")) {			String entcodingreso = _form.getentcodingreso();			String entcodproducto = _form.getentcodproducto();			String entbodega = _form.getEntbodega();			String entposicion = _form.getentposicion();			String entcantidad = _form.getentcantidad();			String entpesoneto = _form.getentpesoneto();			String entpesonetototal = (Float.parseFloat(entpesoneto) * Float.parseFloat(entcantidad)) + "";			String entpesobruto = _form.getentpesobruto();			String entpesobrutototal = (Float.parseFloat(entpesobruto) * Float.parseFloat(entcantidad)) + "";			// String entsaldopesoneto =entpesonetototal;			// String entsaldopesobruto = entpesobrutototal;			// String entsaldonac = _form.getentsaldonac();			// String entsaldosinnac = _form.getentsaldosinnac();			String entvalor = _form.getEntvalor();			BigDecimal valortotal = new BigDecimal(entvalor).multiply(new BigDecimal(entcantidad));			String entunidad = _form.getEntunidad();			String entlote = _form.getentlote();			// defino el tipo de saldo			/*			 * entity = ging.getingreso(_form.getentcodingreso()); if(entity.getingtipo().equals("TRAFICO")) { entsaldonac ="0"; entsaldosinnac = entcantidad; } if(entity.getingtipo().equals("DEVOLUCION")) { entsaldonac =entcantidad; entsaldosinnac = "0"; } if(entity.getingtipo().equals("DESPIECE"))			 * { entsaldonac =entcantidad; entsaldosinnac = "0"; }			 */			try {				// SE CREA con el saldo fisico CERO!!!!!				/*				 * control.crearentrada(entcodingreso,entcodproducto,entbodega, entposicion,entcantidad, entpesoneto, entpesonetototal , entpesobruto, entpesobrutototal, entsaldopesoneto, entsaldopesobruto, entsaldonac,entsaldosinnac, entvalor, valortotal.toPlainString(), entsaldonac,				 * entsaldosinnac);				 */				control.crearentrada(entcodingreso, entcodproducto, entbodega, entposicion, entcantidad, entpesoneto, entpesonetototal, entpesobruto, entpesobrutototal, "0", "0", "0", "0", entvalor, valortotal.toPlainString(), "0", "0", entunidad, entlote);				mensaje = "entrada Creado con Exito";				request.setAttribute("ingcodsx", entcodingreso);				entity = ging.getingreso(_form.getentcodingreso());			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el entrada: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				entity = ging.getingreso(_form.getentcodingreso());				// coloco bien los valores en el form				String entcantidad = _form.getentcantidad();				String entpesoneto = _form.getentpesoneto();				String entpesonetototal = (Float.parseFloat(entpesoneto) * Float.parseFloat(entcantidad)) + "";				String entpesobruto = _form.getentpesobruto();				String entpesobrutototal = (Float.parseFloat(entpesobruto) * Float.parseFloat(entcantidad)) + "";				_form.setEntpesonetototal(entpesonetototal);				_form.setEntpesobrutototal(entpesobrutototal);				_form.setentsaldopesobruto("0");				_form.setentsaldopesoneto("0");				_form.setentsaldonac("0");				_form.setentsaldosinnac("0");				_form.setEntsaldonacf("0");				_form.setEntsaldosinnacf("0");				// defino el tipo de saldo				/*				 * entity = ging.getingreso(_form.getentcodingreso()); if(entity.getingtipo().equals("TRAFICO")) { _form.setentsaldonac("0"); _form.setentsaldosinnac ( _form.getentcantidad() ); } if(entity.getingtipo().equals("DEVOLUCION")) { _form.setentsaldonac( _form.getentcantidad());				 * _form.setentsaldosinnac ( "0" ); } if(entity.getingtipo().equals("DESPIECE")) { _form.setentsaldonac( _form.getentcantidad()); _form.setentsaldosinnac ( "0" ); }				 */				String entvalor = _form.getEntvalor();				BigDecimal valortotal = new BigDecimal(entvalor).multiply(new BigDecimal(_form.getentcantidad()));				_form.setEntvalortotal(valortotal.toPlainString());				control.updateentrada(_form);				mensaje = "entrada Actualizado con Exito";				request.setAttribute("ingcodsx", _form.getentcodingreso());				entity = ging.getingreso(_form.getentcodingreso());			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el entrada: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			String ingcodsx = control.getentrada(codsx).getentcodingreso();			try {				control.eliminar(codsx);				mensaje = "entrada Eliminado con Exito";				entity = ging.getingreso(ingcodsx);			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el entrada: <br> " + e.getLocalizedMessage();			}		}				// Opcion de setPosicion		if (opcion.equals("setPosicion")) {			String codsx = request.getParameter("codsx");			String ingcodsx = request.getParameter("ingcodsx");			String nuevapos = request.getParameter("nuevapos");			gstconfig_bodega gcbod = new gstconfig_bodega();			try {				if (gcbod.es_posicion_valida("1", nuevapos)) {  /// OJO se esta validando siempre con la bodega 1					control.updatePosicion(codsx, nuevapos);				} else {					mensaje = "La posicion "+ nuevapos +" no es valida, esta ocupada o es un tunel";				}			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo actualizar posicion entrada: <br> " + e.getLocalizedMessage();			}						entity = ging.getingreso(ingcodsx);								}						ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		ingresoForm temp = new ingresoForm();		temp.setopcion("update");		temp.llenar(entity);		request.setAttribute("ingresoForm", temp);		return mapping.findForward("ingreso_datos");	}}