package ingreso.form;import javax.servlet.http.HttpServletRequest;import org.apache.struts.action.ActionErrors;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionMapping;import ingreso.control.*;import ingreso.entity.*;import org.apache.struts.action.ActionMessage;/** * CLASE GENERADA CON generator V3.0 By pablito****** */public class reubicacionForm extends ActionForm {	private String recodsx;	/**	 * @uml.property name="recodcia"	 */	private String recodcia;	private String reingreso;	private String retipo;	private String reentradaor;	private String reentradafin;	private String recantidad;	private String reestado;	private String refecha;	private String opcion;	/**	 * @uml.property name="bodegafin"	 */	private String bodegafin;	/**	 * @uml.property name="posicionfin"	 */	private String posicionfin;	/**	 * @uml.property name="retipomov"	 */	private String retipomov;	/**	 * @return	 * @uml.property name="bodegafin"	 */	public String getBodegafin() {		return bodegafin;	}	/**	 * @param bodega	 * @uml.property name="bodegafin"	 */	public void setBodegafin(String bodega) {		this.bodegafin = bodega;	}	public void setopcion(String newopcion) {		this.opcion = newopcion;	}	public String getopcion() {		return this.opcion;	}	public String getrecodsx() {		return recodsx;	}	public String getreingreso() {		return reingreso;	}	public String getretipo() {		return retipo;	}	public String getreentradaor() {		return reentradaor;	}	public String getreentradafin() {		return reentradafin;	}	public String getrecantidad() {		return recantidad;	}	public String getreestado() {		return reestado;	}	public String getrefecha() {		return refecha;	}	public void setrecodsx(String new_recodsx) {		this.recodsx = new_recodsx;	}	public void setreingreso(String new_reingreso) {		this.reingreso = new_reingreso;	}	public void setretipo(String new_retipo) {		this.retipo = new_retipo;	}	public void setreentradaor(String new_reentradaor) {		this.reentradaor = new_reentradaor;	}	public void setreentradafin(String new_reentradafin) {		this.reentradafin = new_reentradafin;	}	public void setrecantidad(String new_recantidad) {		this.recantidad = new_recantidad;	}	public void setreestado(String new_reestado) {		this.reestado = new_reestado;	}	public void setrefecha(String new_refecha) {		this.refecha = new_refecha;	}	public void reset(ActionMapping mapping, HttpServletRequest request) {	}	public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {		ActionErrors errors = new ActionErrors();		gstreubicacion greubicacion = new gstreubicacion();		opcion = opcion == null ? "crear" : opcion;		if (opcion.equals("set") || opcion.equals("delete") || opcion.equals("activar"))			return null;		if (opcion.equals("crear")) {//valido campos requeridos:		}		if (reingreso.equals(""))			errors.add("reingreso", new ActionMessage("El INGRESO no puede ser vacio", false));		if (retipo.equals(""))			errors.add("retipo", new ActionMessage("El TIPO no puede ser vacio", false));		if (reentradaor.equals(""))			errors.add("reentradaor", new ActionMessage("<br>Debe seleccionar los datos del ingreso", false));		if (reestado.equals(""))			errors.add("reestado", new ActionMessage("El reestado no puede ser vacio", false));		if (refecha.equals(""))			errors.add("refecha", new ActionMessage("El refecha no puede ser vacio", false));		if (posicionfin.equals(""))			errors.add("posicionfin", new ActionMessage("LA POSICION de destino no puede ser vacio", false));		if (recantidad.equals(""))			errors.add("recantidad", new ActionMessage("El recantidad no puede ser vacio", false));		// valido que la cantidad no sea mayor al saldo que hay con el tipo...		if (!reentradaor.equals("") && opcion.equals("crear")) {			try {				float rcant = Float.parseFloat(recantidad);				entrada ent = new gstentrada().getentrada(reentradaor);				float cant_or = Float.parseFloat(retipo.equals("NACIONALIZADO") ? ent.getentsaldonac() : ent.getentsaldosinnac());				if (rcant > cant_or)					errors.add("recantidad", new ActionMessage("No puede mover mas del saldo", false));			} catch (NumberFormatException nf) {				errors.add("recantidad", new ActionMessage("La cantidad debe ser numerico", false));			}		}		if (!errors.isEmpty())			errors.add("general", new ActionMessage("No se pudo crear la reubicacion, revise", false));		return errors;	}	public void llenar(reubicacion entity) {		this.recodsx = entity.getrecodsx();		this.recodcia = entity.getrecodcia();		this.reingreso = entity.getreingreso();		this.retipo = entity.getretipo();		this.reentradaor = entity.getreentradaor();		this.reentradafin = entity.getreentradafin();		this.recantidad = entity.getrecantidad();		this.reestado = entity.getreestado();		this.refecha = entity.getrefecha();		if (reentradafin != null && !reentradafin.equals("")) {			entrada ent = new gstentrada().getentrada(reentradafin);			this.posicionfin = ent == null ? "" : ent.getentposicion();		}	}	/**	 * @return	 * @uml.property name="recodcia"	 */	public String getRecodcia() {		return recodcia;	}	/**	 * @param recodcia	 * @uml.property name="recodcia"	 */	public void setRecodcia(String recodcia) {		this.recodcia = recodcia;	}	/**	 * @return	 * @uml.property name="posicionfin"	 */	public String getPosicionfin() {		return posicionfin;	}	/**	 * @param posicionfin	 * @uml.property name="posicionfin"	 */	public void setPosicionfin(String posicionfin) {		this.posicionfin = posicionfin;	}	/**	 * @return	 * @uml.property name="retipomov"	 */	public String getRetipomov() {		return retipomov;	}	/**	 * @param retipomov	 * @uml.property name="retipomov"	 */	public void setRetipomov(String retipomov) {		this.retipomov = retipomov;	}}