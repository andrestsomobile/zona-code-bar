package pedido.action;import java.io.IOException;import java.sql.SQLException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import pedido.control.gstdespacho;import pedido.entity.despacho;import pedido.form.despachoForm;import util.Fecha;import util.config;import util.gstconfig;import util.gstenviarmail;import administracion.entity.usuario;public final class despachoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		usuario usu = (usuario) request.getSession().getAttribute("usuario");				despachoForm _form = (despachoForm) form;		gstdespacho control = new gstdespacho();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String mensaje = "";		String destino = "";		// opcion de fijar la notificacion:		if (opcion.equals("fijar_notificacion")) {			destino = "despacho_datos";			despacho entity = control.getdespacho(request.getParameter("codsx"));			try {				entity.setDespnotifzfp(request.getParameter("despnotifzfp"));				control.updatedespacho(entity);				mensaje = "Actualizacion de Notificacion exitosa";			} catch (SQLException e1) {				mensaje = "No se pudo actualizar de Notificacion: <br> " + e1.getLocalizedMessage();				e1.printStackTrace();			}			despachoForm temp = new despachoForm();			temp.llenar(entity);			temp.setopcion("update");			request.setAttribute("despachoForm", temp);		}		// opcion de cambiar transportadora:		if (opcion.equals("cambiar_transportadora")) {			destino = "despacho_datos";			despacho entity = control.getdespacho(request.getParameter("despcodsx"));			try {				entity.setdesptransportadora(request.getParameter("desptransportadora"));				control.updatedespacho(entity);			} catch (SQLException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}			despachoForm temp = new despachoForm();			temp.llenar(entity);			temp.setopcion("update");			request.setAttribute("despachoForm", temp);		}		if (opcion.equals("activar")) {			despacho entity = control.getdespacho(request.getParameter("codsx"));			despachoForm temp = new despachoForm();			 if(control.validarTiempoDespacho( entity.getdespcodsx())) {				entity.setdespestado("TRAMITE");				try {					control.updatedespacho(entity);					gstenviarmail gem = new gstenviarmail();					gstconfig gc = new gstconfig();					config conf = gc. getconfig("notifica_activacion_despacho");										if (conf != null) {						String correo = conf.getcfvalor();						String texto = "Se activo Planilla Despacho No. " + entity.getdespcodsx() + ". Usuario: " + usu.getusunombre() + ". Fecha: " + Fecha.getFecha();						gem.crea(correo, "Notificacion Activacion Planilla Despacho", texto);					}					mensaje = "Activacion Exitosa";				} catch (SQLException e1) {					mensaje = "no se pudo activar:" + e1.getMessage();					e1.printStackTrace();				}			} else {				mensaje = "NO PUEDE ACTIVAR UN DESPACHO DE UN MES ANTERIOR.";			}			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("despachoForm", temp);			destino = "despacho_datos";		}		// OPCION DE set:		if (opcion.equals("set")) {			despacho entity = control.getdespacho(request.getParameter("codsx"));			despachoForm temp = new despachoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("despachoForm", temp);			destino = "despacho_datos";		}		// opcion de CREAR		if (opcion.equals("crear")) {			String despempresa = _form.getdespempresa();			String despfecha = _form.getdespfecha();			String despobservacion = _form.getdespobservacion();			String despplaca = _form.getdespplaca();			String despnombrecond = _form.getdespnombrecond();			String despcedcond = _form.getdespcedcond();			String desptransportadora = _form.getdesptransportadora();			String despestado = _form.getdespestado();			String despconsec = _form.getDespconsec();			String despconseczfp = _form.getDespconseczfp();			String despnotifzfp = _form.getDespnotifzfp();			String desptipo = _form.getDesptipo();			String despcelcond = _form.getDespcelcond();			String despfechalv = _form.getDespfechalv();			String desphoralv = _form.getDesphoralv();			String despfechasv = _form.getDespfechasv();			String desphorasv = _form.getDesphorasv();			String despfechaic = _form.getDespfechaic();			String desphoraic = _form.getDesphoraic();			String despfechafc = _form.getDespfechafc();			String desphorafc = _form.getDesphorafc();			String desptipoveh = _form.getDesptipoveh();			String desphorapactada = _form.getDesphorapactada();			String depguiaremesa = _form.getDepguiaremesa();			String depprecinto = _form.getDepprecinto();			destino = "despacho_datos";			try {				control.creardespacho(despempresa, despfecha, despobservacion, despplaca, despnombrecond, despcedcond, desptransportadora, despestado, "0", "0", "0", "0", "0", despconsec, despconseczfp, despnotifzfp, desptipo, despcelcond,despfechalv, desphoralv, despfechasv, desphorasv, despfechaic, desphoraic, despfechafc, desphorafc,desptipoveh, desphorapactada, depguiaremesa, depprecinto);				despacho desp = control.getdespacho(despempresa, despfecha);				_form.setopcion("update");				_form.setdespcodsx(desp.getdespcodsx());				mensaje = "despacho Creado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el despacho: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				destino = "despacho_datos";				// _form.setdespfecha( Fecha.getFecha());				despacho _entity = control.getdespacho(_form.getdespcodsx());				if (_entity != null && !_entity.getdespestado().equals("FINALIZADO")) { 					control.updatedespacho(_form);					mensaje = "despacho Actualizado con Exito";				} else {					mensaje = "No se pueden modificar los datos del despacho en estado FINALIZADO.";				}			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el despacho: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			destino = "despacho";			String codsx = request.getParameter("codsx");			try {				control.eliminar(codsx);				mensaje = "despacho Eliminado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el despacho: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}