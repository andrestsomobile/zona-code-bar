package ingreso.action;import ingreso.control.gstingreso;import ingreso.control.gsttrafico;import ingreso.entity.ingreso;import ingreso.entity.trafico;import ingreso.form.ingresoForm;import java.io.IOException;import java.sql.SQLException;import java.util.Collection;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import nacionalizacion.control.gstnacionalizacion;import nacionalizacion.entity.nacionalizacion;import nacionalizacion.form.nacionalizacionForm;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import pedido.control.gstpedido;import averias.control.gstaveria;public final class ingresoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		ingresoForm _form = (ingresoForm) form;		gstingreso control = new gstingreso();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String destino = "";		String mensaje = "";		// opcion de activar un ingreso:		if (opcion.equals("activar")) {			ingreso entity = control.getingreso(request.getParameter("codsx"));			// miro que no este en nacionalizaciones o en packings, o en pedidos			boolean puede = true;			if (entity.getingtipo().equals("TRAFICO")) {				// si es ingreso que no tenga ninguna nacionalizacion				Collection nacs = new gstnacionalizacion().getlistanacionalizacionByIngreso(entity.getingcodsx());				if (!nacs.isEmpty()) {					mensaje = "No puede activar el ingreso por que tiene nacionalizaciones, revise";					puede = false;				}			} else {				// que no este en pedidos:				Collection pedidos = new gstpedido().getlistapedidoByIngreso(entity.getingcodsx());				if (!pedidos.isEmpty()) {					mensaje = "No puede activar el ingreso por que tiene Pedidos, revise";					puede = false;				}			}			// reviso que el ingreso no tenga averias:			gstaveria gave = new gstaveria();			Collection aves = gave.getlistaAveriaIngresos(entity.getingcodsx());			if (!aves.isEmpty()) {				mensaje = "No puede activar el ingreso por que tiene AVERIAS, revise";				puede = false;			}			if (puede) {				entity.setIngestado("TRAMITE");				// entity.setingfecha(util.Fecha.getFecha());				try {					control.updateingreso(entity);					mensaje = "Ingreso Activado con exito";				} catch (SQLException e1) {					mensaje = "No se pudo Activar el Ingreso <br>" + e1.getMessage();					e1.printStackTrace();					destino = "ingreso_datos";				}			}			ingresoForm temp = new ingresoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("ingresoForm", temp);			destino = "ingreso_datos";		}		// OPCION DE set:		if (opcion.equals("set")) {			ingreso entity = control.getingreso(request.getParameter("codsx"));			ingresoForm temp = new ingresoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("ingresoForm", temp);			destino = "ingreso_datos";		}		// opcion de CREAR		if (opcion.equals("crear")) {			String ingcodcia = _form.getingcodcia();			String ingfecha = _form.getingfecha();			String ingtipo = _form.getingtipo();			String ingtrafico = _form.getingtrafico();			String ingobservacion = _form.getIngobservacion();			String ingestado = _form.getIngestado();			String ingcausal = _form.getIngcausal();			String ingclidevolucion = _form.getIngcli_devolucion();			String ingciudad_dev = _form.getIngciudad_dev();			String ingconsec = _form.getIngconsec();			ingconsec = ingconsec.equals("") ? null : ingconsec;			String ingconseczfp = _form.getIngconseczfp();			ingconseczfp = ingconseczfp.equals("") ? null : ingconseczfp;			String ingplanilla = _form.getIngplanilla();			try {				destino = "ingreso_datos";				control.crearingreso(ingcodcia, ingfecha, ingtipo, ingtrafico == null || (ingtrafico != null && ingtrafico.equals("")) ? null : ingtrafico,				ingobservacion, ingestado, ingtipo.equals("DEVOLUCION") ? ingcausal : null, ingclidevolucion == null ? null : ingclidevolucion.equals("") ? null : ingclidevolucion,				"0", "0", "0", "0", ingciudad_dev == null ? null : ingciudad_dev.equals("") ? null : ingciudad_dev, ingconsec, ingconseczfp, ingplanilla);				mensaje = "ingreso Creado con Exito";				ingreso temp = control.getingreso(ingcodcia, ingfecha, ingtipo);								// ahora agrego las referencias usando la informacion de lotes y referencia_factura				if (temp != null && temp.getingtipo().equalsIgnoreCase("TRAFICO")) {					//control.crear_entradas_trafico(ingcodcia, temp.getingcodsx(), ingtrafico, "1", "PISO");				}				ingresoForm ingf = new ingresoForm();				ingf.llenar(temp);				ingf.setopcion("update");				request.setAttribute("ingresoForm", ingf);			} catch (SQLException e) {				e.printStackTrace();				destino = "ingreso_datos";				mensaje = "No se pudo Crear el ingreso: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				ingreso ing = control.getingreso(_form.getingcodsx());				boolean puede = true;				if (ing.getIngestado().equals("TRAMITE") && _form.getIngestado().equals("FINALIZADO") && ing.getingtipo().equals("TRAFICO")) {					// cuando finalize un ingreso,					trafico traf = new gsttrafico().gettrafico(ing.getingtrafico());					if (traf.getTrafestado().equals("TRAMITE")) {						puede = false;						mensaje = "NO PUEDE FINALIZAR EL INGRESO HASTA NO FINALIZAR EL TRAFICO ASOCIADO NUMERO :" + ing.getingtrafico();						_form.setIngestado("TRAMITE");					}				}				destino = "ingreso_datos";				if (puede) {					// _form.setingfecha( util.Fecha.getFecha());					control.updateingreso(_form);					mensaje = "ingreso Actualizado con Exito";				}			} catch (SQLException e) {				e.printStackTrace();				destino = "ingreso_datos";				mensaje = "No se pudo Actualizar el ingreso: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			destino = "ingreso";			try {				control.eliminar(codsx);				mensaje = "ingreso Eliminado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el ingreso: <br> " + e.getLocalizedMessage();			}		}				if (opcion.equals("actualizar_consecutivo_zf")) {			ingreso entity = control.getingreso(request.getParameter("codsx"));			String ingconsec = request.getParameter("ingconsec");			String ingconseczfp = request.getParameter("ingconseczfp");			entity.setIngconseczfp(ingconseczfp);			entity.setIngconsec(ingconsec);			try {				control.updateingreso(entity);				mensaje = "Consecutivos de ZFP Actualizados con exito";			} catch (SQLException e) {				mensaje = mensaje = "No se pudieron actualizar los Consecutivos de ZFP: <br> " + e.getLocalizedMessage();				e.printStackTrace();			}			ingresoForm temp = new ingresoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("ingresoForm", temp);			destino = "ingreso_datos";		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}