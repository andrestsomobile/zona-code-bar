package nacionalizacion.action;import ingreso.control.gstentrada;import ingreso.entity.entrada;import java.io.IOException;import java.math.BigDecimal;import javax.servlet.ServletException;import java.sql.SQLException;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.*;import nacionalizacion.control.*;import nacionalizacion.entity.*;import nacionalizacion.form.*;import org.apache.struts.action.*;import pedido.control.gestionSaldos;import util.validador;import db.beanConnector;public final class nacionalizacion_detalleAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		gstentrada gent = new gstentrada();		gstnacionalizacion gnac = new gstnacionalizacion();		nacionalizacion_detalleForm _form = (nacionalizacion_detalleForm) form;		gstnacionalizacion_detalle control = new gstnacionalizacion_detalle();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String naccodsx = "";		// OPCION DE set:		if (opcion.equals("set")) {			nacionalizacion_detalle entity = control.getnacionalizacion_detalle(request.getParameter("codsx"));			nacionalizacion_detalleForm temp = new nacionalizacion_detalleForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("nacionalizacion_detalleForm", temp);			return mapping.findForward("nacionalizacion_detalle_datos");		}		String mensaje = "";		// para nacionalizar UNA CANTIDAD ESPECIFICA de una referencia		if (opcion.equals("nacionalizar_referencia_cantidad")) {			naccodsx = request.getParameter("naccodsx");			String ingcodsx = request.getParameter("ingcodsx");			String procodsx = request.getParameter("procodsx");			String cantidad = request.getParameter("cantidad");			if (procodsx.equals("") || !validador.validarNumero(cantidad)) {				mensaje = "DEBE ESCOGER EL PRODUCTO A NACIONALIZAR Y LA CANTIDAD";			} else {				// LA CANTIDAD EXISTE Y ES NUMERICO, ADEMAS QUE YA SELECCIONO EL PRODUCTO				nacionalizacion nac = gnac.getnacionalizacion(naccodsx);				beanConnector db = new beanConnector(false);				gstnacionalizacion_detalle gnacdet = new gstnacionalizacion_detalle(db);				gent = new gstentrada(db);				// primero borro todos los detalles que hayan de este producto con este ingreso:				Collection detalles = gnacdet.getlistanacionalizacion_detalleByEntrada(naccodsx, procodsx);				Iterator itedet = detalles.iterator();				boolean resp = true;				while (itedet.hasNext()) {					nacionalizacion_detalle ndet = (nacionalizacion_detalle) itedet.next();					try {						resp &= gnacdet.eliminar(ndet.getnadcodsx());					} catch (SQLException e1) {						// TODO Auto-generated catch block						e1.printStackTrace();						resp = false;						mensaje = e1.getMessage();					}				}				Collection lista = gent.getlistaentradaByingreso_sinnac(nac.getnacingreso(), procodsx);				Iterator ite = lista.iterator();				BigDecimal requerido = new BigDecimal(cantidad);				BigDecimal faltante = new BigDecimal(cantidad);				while (resp && ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {					entrada ent = (entrada) ite.next();					BigDecimal saldosinnac = new BigDecimal(ent.getentsaldosinnac());					BigDecimal saldonac = new BigDecimal(ent.getentsaldonac());					String entpesoneto = ent.getentpesoneto();					String entpesobruto = ent.getentpesobruto();					String nadfob = ent.getEntvalor();					try {						// si el faltante es mayor al saldo sin naca de la entrada, cojo todo esto y voy a ver la siguiente						// entrada						if (faltante.compareTo(saldosinnac) > 0) {							String nadcantidad = ent.getentsaldosinnac();							BigDecimal nadpesonetototal = new BigDecimal(entpesoneto).multiply(new BigDecimal(nadcantidad));							BigDecimal nadpesobrutototal = new BigDecimal(entpesobruto).multiply(new BigDecimal(nadcantidad));							BigDecimal nadfobtotal = new BigDecimal(nadfob).multiply(new BigDecimal(nadcantidad));							resp &= gnacdet.crearnacionalizacion_detalle(naccodsx, ent.getentcodsx(), ent.getentsaldosinnac(), ent.getentsaldosinnac(), entpesoneto, nadpesonetototal.toPlainString(), entpesobruto, nadpesobrutototal.toPlainString(), nadfob, nadfobtotal.toPlainString());							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), nadcantidad);							ent.setentsaldosinnac("0");							resp &= gent.updateentrada(ent);						} else {							// el faltante es menor al saldo de la entrada , tomo el faltante y se lo resto al saldo para fijarlo:							String nadcantidad = faltante.toPlainString();							BigDecimal nadpesonetototal = new BigDecimal(entpesoneto).multiply(new BigDecimal(nadcantidad));							BigDecimal nadpesobrutototal = new BigDecimal(entpesobruto).multiply(new BigDecimal(nadcantidad));							BigDecimal nadfobtotal = new BigDecimal(nadfob).multiply(new BigDecimal(nadcantidad));							resp &= gnacdet.crearnacionalizacion_detalle(naccodsx, ent.getentcodsx(), nadcantidad, nadcantidad, entpesoneto, nadpesonetototal.toPlainString(), entpesobruto, nadpesobrutototal.toPlainString(), nadfob, nadfobtotal.toPlainString());							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), nadcantidad);							String saldo_ent = util.Math.restar_bigdecimal(ent.getentsaldosinnac(), nadcantidad).toPlainString();							ent.setentsaldosinnac(saldo_ent);							resp &= gent.updateentrada(ent);						}					} catch (SQLException e1) {						e1.printStackTrace();						resp = false;						mensaje = "No se pudo efectuar la nacionalizacion de todo el embarque <br>" + e1.getMessage();					}				}				System.out.println(faltante);				String respaldado = util.Math.restar_bigdecimal(requerido.toPlainString(), faltante.toPlainString()).toPlainString();				mensaje = "SE NACIONALIZARON " + respaldado + " unidades de la referencia";				if (resp) {					db.commit();					mensaje += (faltante.compareTo(BigDecimal.ZERO) == 0 ? "<br>La referencia se nacionalizo con exito en su totalidad" : "<br>EL SALDO SIN NACIONALIZAR NO FUE SUFICIENTE");				} else					db.rollback();			}		}		// para nacionalizar todo lo que quede pero de una sola referencia...		if (opcion.equals("nacionalizar_referencia")) {			naccodsx = request.getParameter("naccodsx");			String procodsx = request.getParameter("procodsx");			if (procodsx.equals("")) {				mensaje = "DEBE ESCOGER EL PRODUCTO A NACIONALIZAR";			} else {				nacionalizacion nac = gnac.getnacionalizacion(naccodsx);				beanConnector db = new beanConnector(false);				gstnacionalizacion_detalle gnacdet = new gstnacionalizacion_detalle(db);				gent = new gstentrada(db);				// primero borro todos los detalles que hayan de este producto con este ingreso:				Collection detalles = gnacdet.getlistanacionalizacion_detalleByEntrada(naccodsx, procodsx);				Iterator itedet = detalles.iterator();				boolean resp = true;				while (itedet.hasNext()) {					nacionalizacion_detalle ndet = (nacionalizacion_detalle) itedet.next();					try {						resp &= gnacdet.eliminar(ndet.getnadcodsx());					} catch (SQLException e1) {						// TODO Auto-generated catch block						e1.printStackTrace();						resp = false;						mensaje = e1.getMessage();					}				}				Collection lista = gent.getlistaentradaByingreso_sinnac(nac.getnacingreso(), procodsx);				Iterator ite = lista.iterator();				while (resp && ite.hasNext()) {					entrada ent = (entrada) ite.next();					float saldosinnac = Float.parseFloat(ent.getentsaldosinnac());					float saldonac = Float.parseFloat(ent.getentsaldonac());					String entpesoneto = ent.getentpesoneto();					String entpesobruto = ent.getentpesobruto();					String nadcantidad = ent.getentsaldosinnac();					BigDecimal nadpesonetototal = new BigDecimal(entpesoneto).multiply(new BigDecimal(nadcantidad));					BigDecimal nadpesobrutototal = new BigDecimal(entpesobruto).multiply(new BigDecimal(nadcantidad));					String nadfob = ent.getEntvalor();					BigDecimal nadfobtotal = new BigDecimal(nadfob).multiply(new BigDecimal(nadcantidad));					try {						resp &= gnacdet.crearnacionalizacion_detalle(naccodsx, ent.getentcodsx(), ent.getentsaldosinnac(), ent.getentsaldosinnac(), entpesoneto, nadpesonetototal.toPlainString(), entpesobruto, nadpesobrutototal.toPlainString(), nadfob, nadfobtotal.toPlainString());						// ent.setentsaldonac( (saldonac + saldosinnac) + "" );						ent.setentsaldosinnac("0");						resp &= gent.updateentrada(ent);					} catch (SQLException e1) {						e1.printStackTrace();						resp = false;						mensaje = "No se pudo efectuar la nacionalizacion de todo el embarque <br>" + e1.getMessage();					}				}				if (resp) {					db.commit();					mensaje = "La referencia se nacionalizo con exito en su totalidad";				} else					db.rollback();			}		}		// opcion de CREAR		if (opcion.equals("crear")) {			String nadcodnac = _form.getnadcodnac();			String nadentrada = _form.getNadentrada();			String nadcantidad = _form.getnadcantidad();			entrada entr = new gstentrada().getentrada(nadentrada);			String nadpesoneto = entr.getentpesoneto();			String nadpesobruto = entr.getentpesobruto();			BigDecimal nadpesonetototal = new BigDecimal(nadpesoneto).multiply(new BigDecimal(nadcantidad));			BigDecimal nadpesobrutototal = new BigDecimal(nadpesobruto).multiply(new BigDecimal(nadcantidad));			String nadfob = entr.getEntvalor();			BigDecimal nadfobtotal = new BigDecimal(nadfob).multiply(new BigDecimal(nadcantidad));			naccodsx = _form.getnadcodnac();			try {				// la creo y resto el saldo a la entrada				beanConnector db = new beanConnector(false);				gent = new gstentrada(db);				control = new gstnacionalizacion_detalle(db);				entrada ent = gent.getentrada(nadentrada);				float saldonac = Float.parseFloat(ent.getentsaldonac());				float saldosinnac = Float.parseFloat(ent.getentsaldosinnac());				saldonac += Float.parseFloat(nadcantidad);				saldosinnac -= Float.parseFloat(nadcantidad);				// ent.setentsaldonac(saldonac + "");				ent.setentsaldosinnac(saldosinnac + "");				boolean resp = true;				resp &= gent.updateentrada(ent);				resp &= control.crearnacionalizacion_detalle(nadcodnac, nadentrada, nadcantidad, nadcantidad, nadpesoneto, nadpesonetototal.toPlainString(), nadpesobruto, nadpesobrutototal.toPlainString(), nadfob, nadfobtotal.toPlainString());				if (resp) {					mensaje = "nacionalizacion_detalle Creado con Exito";					db.commit();				} else {					mensaje = "No se pudo agregar la entrada a la nacionalizacion";					db.rollback();				}				db = null;			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el nacionalizacion_detalle: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				naccodsx = _form.getnadcodnac();				control.updatenacionalizacion_detalle(_form);				mensaje = "nacionalizacion_detalle Actualizado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el nacionalizacion_detalle: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar , cuando borre, se gtiene que sumar el saldo a la entrada original:		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			nacionalizacion_detalle nacdet = control.getnacionalizacion_detalle(codsx);			naccodsx = nacdet.getnadcodnac();			try {				control.eliminar(codsx);				mensaje = "nacionalizacion_detalle Eliminado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el nacionalizacion_detalle: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		nacionalizacion nac = new gstnacionalizacion().getnacionalizacion(naccodsx);		nacionalizacionForm nf = new nacionalizacionForm();		nf.llenar(nac);		nf.setopcion("update");		request.setAttribute("nacionalizacionForm", nf);		return mapping.findForward("nacionalizacion_datos");	}}