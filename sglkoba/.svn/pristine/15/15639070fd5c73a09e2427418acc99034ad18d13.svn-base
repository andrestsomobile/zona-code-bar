package ingreso.action;import java.io.IOException;import java.math.BigDecimal;import java.sql.SQLException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import ingreso.control.gstfactura_trafico;import ingreso.control.gstreferencia_trafico;import ingreso.entity.factura_trafico;import ingreso.entity.referencia_trafico;import ingreso.form.factura_traficoForm;import maestro.control.gstproducto;import maestro.entity.producto;import util.Math;  public final class factura_traficoAction  extends Action{
			 public ActionForward execute(ActionMapping mapping,	ActionForm form, 			HttpServletRequest request,	HttpServletResponse response)			throws IOException, ServletException {
factura_traficoForm _form = (factura_traficoForm)form;  gstfactura_trafico control = new gstfactura_trafico(); String opcion = request.getParameter("opcion");  opcion = opcion==null || ( opcion!=null && opcion.equals("")) ? "crear" : opcion; 
String destino="";//OPCION DE set:  if(opcion.equals("set")) {  factura_trafico entity = control.getfactura_trafico(request.getParameter("codsx")); factura_traficoForm  temp  = new factura_traficoForm();  temp.setopcion("update"); temp.llenar(entity);  request.setAttribute("factura_traficoForm", temp); request.setAttribute("trafcodsx", temp.getftrafnumtrafico()); return mapping.findForward("factura_trafico_datos");  }  String mensaje = "";  //opcion de CREAR  if(opcion.equals("crear")) {  String ftrafnumfactura = _form.getftrafnumfactura();   String ftrafnumtrafico = _form.getftrafnumtrafico();  
  try {  control.crearfactura_trafico(ftrafnumfactura,ftrafnumtrafico);  mensaje = "factura_trafico Creado con Exito"; destino = "factura_trafico"; request.setAttribute("trafcodsx", ftrafnumtrafico);  } catch (SQLException e) {   e.printStackTrace();  mensaje = "No se pudo Crear el factura_trafico: <br> " + e.getLocalizedMessage();   }  }  // Opcion de update  if(opcion.equals("update")) {   try {   control.updatefactura_trafico(_form);   mensaje = "factura_trafico Actualizado con Exito";   destino = "factura_trafico"; request.setAttribute("trafcodsx", _form.getftrafnumtrafico());  } catch (SQLException e) { e.printStackTrace();   mensaje = "No se pudo Actualizar el factura_trafico: <br> " + e.getLocalizedMessage();  }  }  // Opcion de eliminar  if(opcion.equals("delete")) { 	String codsx = request.getParameter("codsx");  	try { 		factura_trafico entity = control.getfactura_trafico(codsx);		String trafcodsx = entity.getftrafnumtrafico();		control.eliminar(codsx);  		mensaje = "factura_trafico Eliminado con Exito";  		request.setAttribute("trafcodsx", trafcodsx);		destino = "factura_trafico";	  } catch (SQLException e) { e.printStackTrace(); 	    mensaje = "No se pudo Eliminar el factura_trafico: <br> " + e.getLocalizedMessage(); 	  }  }  // Opcion de moverReferenciaFactura  if(opcion.equals("moverReferenciaFactura")) {	 String codsx           = request.getParameter("codsx");	 String refcantidad     = request.getParameter("refcantidad");	 String ftrafcodsx      = request.getParameter("ftrafcodsx"); //Factura destino	 String reftcodsx       = request.getParameter("reftcodsx");	 	 referencia_trafico referenciaOrigen  = null;	 referencia_trafico referenciaDestino = null;	 factura_trafico facturaDestino 	  = null;	 producto producto                    = null;	 	 	 gstreferencia_trafico controlRefrenciaTrafico = new gstreferencia_trafico();	 gstfactura_trafico controlFactura             = new gstfactura_trafico();	 gstproducto controlProducto                   = new gstproducto();	 	 referenciaOrigen = controlRefrenciaTrafico.getreferencia_trafico(reftcodsx);	 facturaDestino   = controlFactura.getfactura_trafico(ftrafcodsx);	 	 		 producto = controlProducto.getproducto(referenciaOrigen.getreftproducto());	 	 if(Math.comparar(refcantidad, referenciaOrigen.getreftcantidad()) == 1){ 		 refcantidad = referenciaOrigen.getreftcantidad();	 }	 	 	 //Creo o modifica la referencia Destino:	 referenciaDestino = controlRefrenciaTrafico.getreferencia_traficoUqKey(			 	facturaDestino.getftrafcodsx(), 				producto.getprocodsx(), 				"" );	 try {			if(referenciaDestino != null){							String cantidadTotal = Math.sumar(refcantidad, referenciaDestino.getreftcantidad() );				referenciaDestino.setreftcantidad(cantidadTotal);				referenciaDestino.setreftfobunit(referenciaOrigen.getreftfobunit());				referenciaDestino.setreftfobtotal(Math.multiplicar(referenciaOrigen.getreftfobunit() , cantidadTotal));													controlRefrenciaTrafico.updatereferencia_trafico(referenciaDestino);											}else{				if(controlRefrenciaTrafico.crearreferencia_trafico(						facturaDestino.getftrafcodsx(),						producto.getprocodsx(), 						refcantidad, 						producto.getprokiloreal(),						producto.getprokilovolumen(), 						referenciaOrigen.getreftfobunit(), 													Math.multiplicar(referenciaOrigen.getreftfobunit(), refcantidad),						referenciaOrigen.getreftfobunit(), 						Math.multiplicar(referenciaOrigen.getreftfobunit(), refcantidad),						Math.multiplicar(producto.getprokiloreal(), refcantidad),						Math.multiplicar(producto.getprokilovolumen(),refcantidad),						producto.getprokvmasterpack(),						"")){													}						}						//Actualizo el origen			if(Math.comparar(referenciaOrigen.getreftcantidad(), refcantidad) == 0){ //Son iguales				controlRefrenciaTrafico.eliminar(referenciaOrigen.getreftcodsx());			}else{								BigDecimal bgOriginal = new BigDecimal(referenciaOrigen.getreftcantidad());				BigDecimal bgCantidad = new BigDecimal(refcantidad);				BigDecimal bgTotal    = bgOriginal.subtract(bgCantidad);				String sTotal         = bgTotal.setScale(2).toPlainString();				 				referenciaOrigen.setreftcantidad(sTotal);				controlRefrenciaTrafico.updatereferencia_trafico(referenciaOrigen);			}				 } catch (SQLException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();	}  	 	 referenciaOrigen = controlRefrenciaTrafico.getreferencia_trafico(reftcodsx);	 	 factura_trafico entity = control.getfactura_trafico(codsx);	 	 destino 				= "factura_trafico";	 mensaje 				= "Referencia transferida con Exito";	 request.setAttribute("trafcodsx", codsx); }  ActionMessages e = getErrors(request);  e.add("general", new ActionMessage(mensaje, false)); addErrors(request, e);  return mapping.findForward("factura_trafico");    } }