package reportes.util;

import java.io.File;
import java.util.Collection;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;

import jxl.Workbook;
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.NumberFormat;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import maestro.control.gstcompania;
import maestro.entity.compania;
import reportes.form.reportesForm;
import db.GstTabla;
import db.beanConnector;

public class inventario_posicion_bodega extends Command {

	public reporte rep = new reporte();
	
	public void execute(String ruta, HttpServletRequest request, reportesForm repfor) {

		exportar(request, repfor);
	}

	private void exportar(HttpServletRequest request, reportesForm repfor) {
		String ruta = request.getRealPath("") + File.separator + "uploads" + File.separator;
		String nomarch = "InvPosicionBodega" + ".xls";
		File archivo = new File(ruta, nomarch);
		gstcompania gstcom = new gstcompania();	
		WritableFont letraT = new WritableFont(WritableFont.TAHOMA, 12, WritableFont.BOLD);
		WritableCellFormat formatT = new WritableCellFormat(letraT);
		WritableFont letra = new WritableFont(WritableFont.TAHOMA, 11, WritableFont.NO_BOLD);
		WritableCellFormat format = new WritableCellFormat(letra);
		NumberFormat numero = new jxl.write.NumberFormat ("#,##0");
		WritableCellFormat formatonumero = new jxl.write.WritableCellFormat (numero);  
		

		
		int renglon = 0;
		int col = 0;
		
		try {
			WritableWorkbook book = Workbook.createWorkbook(archivo);
			WritableSheet hoja = book.createSheet("InvPosicionBodega", 0); 
			//Merge col[0-11]
		    hoja.mergeCells(0, renglon, 11, renglon);
			hoja.addCell(new Label(col,renglon++,"Inventario por Posicion Bodega", formatT));
			hoja.mergeCells(0, renglon, 11, renglon);
			
				
				renglon = renglon + 1;
				Collection detalles = rep.detalle();
				Iterator itdet = detalles.iterator();
				
				if (itdet.hasNext()) {
			
					col = 0;
					hoja.addCell(new Label(col++, renglon, "Posicion", formatT));
					hoja.addCell(new Label(col++, renglon, "Material", formatT));
					hoja.addCell(new Label(col++, renglon, "Descripcion", formatT));
					hoja.addCell(new Label(col++, renglon, "UMP", formatT));
					hoja.addCell(new Label(col++, renglon, "Ump x Estiba", formatT));
					hoja.addCell(new Label(col++, renglon, "Importacion", formatT));
					hoja.addCell(new Label(col++, renglon, "Saldo NAC", formatT));
					hoja.addCell(new Label(col++, renglon, "Saldo SNAC", formatT));
					hoja.addCell(new Label(col++, renglon, "Lote", formatT));
					hoja.addCell(new Label(col++, renglon, "Vencimiento Lote", formatT));
					hoja.addCell(new Label(col++, renglon, "Estado", formatT));
					hoja.addCell(new Label(col++, renglon, "Cod.Interno", formatT));
					renglon++;
					int reg_ini = renglon + 1;
					while (itdet.hasNext()) {
						col = 0;
						Collection datosdet = (Collection) itdet.next();
						Iterator datadet = datosdet.iterator();
						String posicion =  (String) datadet.next();
						String material =  (String) datadet.next();
						String descripcion =  (String) datadet.next();
						String proump =  (String) datadet.next();
						String trafnumdta =  (String) datadet.next();
						String ump_estiba =  (String) datadet.next();
						String entcodsx =  (String) datadet.next();
						String entposicion =  (String) datadet.next();
						String saldoNAC =  (String) datadet.next();
						String saldoSNAC =  (String) datadet.next();
						String lote =  (String) datadet.next();
						String lote_inicio =  (String) datadet.next();
						String lote_vencimiento =  (String) datadet.next();
						String estado =  (String) datadet.next();
						String cbentrada =  (String) datadet.next();
						String cbestante =  (String) datadet.next();
						String cbnivel =  (String) datadet.next();
						String cbposicion =  (String) datadet.next();
						
						hoja.addCell(new Label(col++, renglon, posicion, format));
						hoja.addCell(new Label(col++, renglon, material, format));
						hoja.addCell(new Label(col++, renglon, descripcion, format));
						hoja.addCell(new Label(col++, renglon, proump, format));
						hoja.addCell(new Label(col++, renglon, ump_estiba, format));
						hoja.addCell(new Label(col++, renglon, trafnumdta, format));
						hoja.addCell(new Number(col++, renglon, Double.parseDouble(saldoNAC), formatonumero));
						hoja.addCell(new Number(col++, renglon, Double.parseDouble(saldoSNAC), formatonumero));
						hoja.addCell(new Label(col++, renglon, lote, format));
						hoja.addCell(new Label(col++, renglon, lote_vencimiento, format));
						hoja.addCell(new Label(col++, renglon, ump_estiba, format));
						hoja.addCell(new Label(col++, renglon, trafnumdta, format));
						renglon++;
					}
					col = 0;
					//Merge col[0-11]
				    hoja.mergeCells(0, renglon, 1, renglon);
					hoja.addCell(new Label(col,renglon,"TOTALES", formatT));
					col = 2;
					
					Formula fC = new Formula(col++, renglon, "SUMA(C" + reg_ini + ":C" + renglon + ")",formatonumero );
					hoja.addCell(fC);
					Formula fD = new Formula(col++, renglon, "SUMA(D" + reg_ini + ":D" + renglon + ")",formatonumero );
					hoja.addCell(fD);
					Formula fE = new Formula(col++, renglon, "SUMA(E" + reg_ini + ":E" + renglon + ")",formatonumero );
					hoja.addCell(fE);
					Formula fF = new Formula(col++, renglon, "SUMA(F" + reg_ini + ":F" + renglon + ")",formatonumero );
					hoja.addCell(fF);
					Formula fG = new Formula(col++, renglon, "SUMA(G" + reg_ini + ":G" + renglon + ")",formatonumero );
					hoja.addCell(fG);
					Formula fH = new Formula(col++, renglon, "SUMA(H" + reg_ini + ":H" + renglon + ")",formatonumero );
					hoja.addCell(fH);
					Formula fI = new Formula(col++, renglon, "SUMA(I" + reg_ini + ":I" + renglon + ")",formatonumero );
					hoja.addCell(fI);
					Formula fJ = new Formula(col++, renglon, "SUMA(J" + reg_ini + ":J" + renglon + ")",formatonumero );
					hoja.addCell(fJ);
					Formula fK = new Formula(col++, renglon, "SUMA(K" + reg_ini + ":K" + renglon + ")",formatonumero );
					hoja.addCell(fK);
					Formula fL = new Formula(col++, renglon, "SUMA(L" + reg_ini + ":L" + renglon + ")",formatonumero );
					hoja.addCell(fL);
				}
				renglon++;
			
			book.write();
			book.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	
	public class reporte extends GstTabla {
		
		public reporte() {
			db = new beanConnector();
		}


		
		public Collection detalle ()  {
			String consulta = "select cbestante||cbposicion as posicionbodega, promodelo, prodescripcion, proump, trafnumdta, round(prounimasterpac,0) as ump_estiba, entcodsx, entposicion, Round(entsaldonac,0) as saldonac, Round(entsaldosinnac,0) as saldosnac, ltraflote,ltrafelaboracion, ltrafvencimiento,\r\n" + 
					"case when cbestado = 'IN' then 'TUNEL' else (case when cbentrada is not null then 'OCUPADA' else 'LIBRE' end) end as tunel,cbentrada,cbestante, cbnivel, cbposicion\r\n" + 
					"from config_bodega \r\n" + 
					"left join entrada on entcodsx = cbentrada\r\n" + 
					"left join producto on procodsx = entcodproducto \r\n" + 
					"left join lote_trafico on ltrafcodsx = entlote\r\n" + 
					"left join trafico on trafcodsx = ltrafnumtrafico\r\n" + 
					"union all\r\n" + 
					"select entposicion as posicionbodega, promodelo, prodescripcion, proump, trafnumdta, round(prounimasterpac,0) as ump_estiba, entcodsx, entposicion, Round(entsaldonac,0) as saldonac, Round(entsaldosinnac,0) as saldosnac, ltraflote,ltrafelaboracion, ltrafvencimiento,\r\n" + 
					"'OTRAS' as tunel,cbentrada,cbestante, cbnivel, cbposicion\r\n" + 
					"from entrada\r\n" + 
					"inner join producto on procodsx = entcodproducto\r\n" + 
					"left join config_bodega on cbentrada = entcodsx \r\n" + 
					"left join lote_trafico on ltrafcodsx = entlote\r\n" + 
					"left join trafico on trafcodsx = ltrafnumtrafico\r\n" + 
					"where cbentrada is null and (entsaldonac+ entsaldosinnac) > 0\r\n" + 
					"order by cbestante, cbnivel, cbposicion,entposicion";
			return getListaDeListas(consulta);
		}
		
	}
		
}
