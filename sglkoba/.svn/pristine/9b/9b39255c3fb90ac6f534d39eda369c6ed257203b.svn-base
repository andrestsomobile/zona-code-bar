package pedido.action;import java.io.IOException;import javax.servlet.ServletException;import java.sql.SQLException;import maestro.control.gstsucursal; import org.apache.struts.action.ActionMessage;  import org.apache.struts.action.ActionMessages; import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.*;import pedido.control.*;import pedido.entity.*;import pedido.form.*;import org.apache.struts.action.*;import db.beanConnector;  public final class pickingAction  extends Action{
			 public ActionForward execute(ActionMapping mapping,	ActionForm form, 			HttpServletRequest request,	HttpServletResponse response)			throws IOException, ServletException {
pickingForm _form = (pickingForm)form;  gstpicking control = new gstpicking(); String opcion = request.getParameter("opcion");  opcion = opcion==null || ( opcion!=null && opcion.equals("")) ? "crear" : opcion; 
 String mensaje = "";  String destino = "";     //OPCION DE set:  if(opcion.equals("activar")) { 	 String codsx = request.getParameter("codsx"); try {	 if(control.tienepedido(codsx)!=null) {	gestionSaldos gsaldo = new gestionSaldos();	boolean r =gsaldo.activarPickingEliminarReferenciasPedido( codsx); 	 if(r)mensaje = "Activacion exitosa";	 else mensaje = "No se pudo efectuar la activacion";	 } else {		 //NO HAY PEDIDO, activacion normal:		 picking pick = control.getpicking( codsx);		 pick.setpickestado("TRAMITE");		 control.updatepicking( pick);		 mensaje = "Activacion Exitosa";	 }} catch (SQLException e1) {	mensaje = "No se pudo efectuar la activacion " + e1.getMessage();	e1.printStackTrace();}picking entity = control.getpicking(request.getParameter("codsx"));pickingForm  temp  = new pickingForm();  temp.setopcion("update"); temp.llenar(entity);  request.setAttribute("pickingForm", temp);  destino = "picking_datos";  } //OPCION DE set:  if(opcion.equals("set")) {  picking entity = control.getpicking(request.getParameter("codsx")); pickingForm  temp  = new pickingForm();  temp.setopcion("update"); temp.llenar(entity);  request.setAttribute("pickingForm", temp);  destino = "picking_datos";  }  //opcion de CREAR  if(opcion.equals("crear")) {  String pickfecha = _form.getpickfecha();   String pickempresa = _form.getpickempresa();   String pickcodpacking = _form.getpickcodpacking();   String pickobservaciones = _form.getpickobservaciones();   String pickestado = _form.getpickestado(); String picknumpedido = _form.getPicknumpedido(); destino = "picking_datos"; 
  try {  control.crearpicking(pickfecha,pickempresa,pickcodpacking,pickobservaciones,pickestado, null, picknumpedido);   picking pick = control.getpicking(pickfecha,pickempresa,pickcodpacking); _form.setpickcodsx( pick.getpickcodsx()); _form.setopcion("update"); mensaje = "picking Creado con Exito";    } catch (SQLException e) {   e.printStackTrace();  mensaje = "No se pudo Crear el picking: <br> " + e.getLocalizedMessage();   }  }  // Opcion de update  if(opcion.equals("update")) {   try {  destino = "picking_datos"; picking pick = control.getpicking( _form.getpickcodsx()); if(_form.getpickestado().equals("FINALIZADO") && pick.getpickestado().equals("TRAMITE") ) {	 int total = new gstpicking_detalle().getlistapicking_detalle( pick.getpickcodsx()).size();		 if(total==0)  {		 _form.setpickestado("TRAMITE");		 throw new SQLException("NO PUEDE FINALIZAR UN PICKING SI NO TIENE AL MENOS UN PRODUCTO"); 	 } }   control.updatepicking(_form);    //de tramite lo pone en finalizado  String pedido = control.tienepedido( _form.getpickcodsx());        //si pasa de TRAMITE A FINALIZADO y hay pedido  if(_form.getpickestado().equals("FINALIZADO") && pick.getpickestado().equals("TRAMITE") && pedido!=null) {	  gestionSaldos gsaldo = new gestionSaldos();	  beanConnector db = new beanConnector(false);	  boolean resp =gsaldo.crearReferenciasPedidoByPicking( pedido, _form.getpickcodsx(), db);	  if(resp) db.commit(); else db.rollback();  }    mensaje = "picking Actualizado con Exito";    } catch (SQLException e) { e.printStackTrace();   mensaje = "No se pudo Actualizar el picking: <br> " + e.getLocalizedMessage();  }  }  // Opcion de eliminar  if(opcion.equals("delete")) {  destino = "picking"; String codsx = request.getParameter("codsx");  try {   control.eliminar(codsx);   mensaje = "picking Eliminado con Exito";    } catch (SQLException e) { e.printStackTrace();   mensaje = "No se pudo Eliminar el picking: <br> " + e.getLocalizedMessage();  }  }  ActionMessages e = getErrors(request);  e.add("general", new ActionMessage(mensaje, false)); addErrors(request, e);  return mapping.findForward(destino );    } }