package ingreso.action;import java.io.IOException;import java.sql.SQLException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import ingreso.control.gstlote_trafico;import ingreso.entity.lote_trafico;import ingreso.form.lote_traficoForm;public final class lote_traficoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		lote_traficoForm _form = (lote_traficoForm) form;		gstlote_trafico control = new gstlote_trafico();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String destino = "";		// OPCION DE set:		if (opcion.equals("set")) {			lote_trafico entity = control.getlote_trafico(request.getParameter("codsx"));			lote_traficoForm temp = new lote_traficoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("lote_traficoForm", temp);			request.setAttribute("trafcodsx", temp.getLtrafnumtrafico());			return mapping.findForward("lote_trafico_datos");		}		String mensaje = "";		// opcion de CREAR		if (opcion.equals("crear")) {			String ltrafnumtrafico = _form.getLtrafnumtrafico();			String lterflote = _form.getLtraflote();			String ltrafelaboracion = _form.getLtrafelaboracion();			String ltrafvencimiento = _form.getLtrafvencimiento();			String ltrafproveedor = _form.getLtrafproveedor();			String ltrafproducto = _form.getLtrafproducto(); 			String ltrafcodproducto = _form.getltrafcodproducto(); 			try {				control.crearlote_trafico(ltrafnumtrafico, lterflote, ltrafelaboracion,ltrafvencimiento,ltrafproveedor,ltrafproducto,ltrafcodproducto);				mensaje = "lote_trafico Creado con Exito";				request.setAttribute("trafcodsx", _form.getLtrafnumtrafico());				destino = "lote_trafico";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el lote_trafico. Revise datos duplicados. <br> " + e.getLocalizedMessage();				destino = "lote_trafico_datos";			}		}				// Opcion de update		if (opcion.equals("update")) {			try {				control.updatelote_trafico(_form);				mensaje = "lote_trafico Actualizado con Exito";				request.setAttribute("trafcodsx", _form.getLtrafnumtrafico());				destino = "lote_trafico";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el lote_trafico: <br> " + e.getLocalizedMessage();			}		}				// Opcion de modificarLote		if (opcion.equals("modificarLote")) {			String codsx = request.getParameter("codsx");			String ltrafvencimiento = request.getParameter("nuevafecha");			String ltraflote = request.getParameter("nuevolote");			destino = "lote_trafico_vencimiento";						try {				lote_trafico entity = control.getlote_trafico(codsx);				if (entity != null ) { 					entity.setLtraflote(ltraflote);					entity.setLtrafvencimiento(ltrafvencimiento);					control.updatelote_trafico(entity);					mensaje = "Datos del Lote Actualizados con Exito";				}							} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar datos del lote: <br> " + e.getLocalizedMessage();			}			ActionMessages e = getErrors(request);			e.add("general", new ActionMessage(mensaje, false));			addErrors(request, e);			return mapping.findForward(destino);		}							// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			try {				lote_trafico ctraf = control.getlote_trafico(codsx);				String trafcodsx = ctraf.getLtrafnumtrafico();				control.eliminar(codsx);				mensaje = "lote_trafico Eliminado con Exito";				request.setAttribute("trafcodsx", trafcodsx);				destino = "lote_trafico";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el lote_trafico: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}