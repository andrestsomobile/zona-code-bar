package nacionalizacion.action;import ingreso.control.gstentrada;import ingreso.entity.entrada;import java.io.IOException;import java.math.BigDecimal;import java.sql.SQLException;import java.util.Collection;import java.util.Iterator;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import nacionalizacion.control.gstnacionalizacion;import nacionalizacion.control.gstnacionalizacion_detalle;import nacionalizacion.entity.nacionalizacion;import nacionalizacion.entity.nacionalizacion_detalle;import nacionalizacion.form.nacionalizacionForm;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import administracion.entity.usuario;import pedido.control.gstpedido;import db.beanConnector;public final class nacionalizacionAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		usuario usu = (usuario) request.getSession().getAttribute("usuario");		nacionalizacionForm _form = (nacionalizacionForm) form;		gstnacionalizacion control = new gstnacionalizacion();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String mensaje = "";		String destino = "";		if (opcion.equals("activar")) {			nacionalizacion entity = control.getnacionalizacion(request.getParameter("codsx"));			nacionalizacion antes = entity;			// primero veo que la nacionalizacion no este en pedidos:			Collection peds = new gstpedido().getlistapedidoByNacionalizacion(entity.getnaccodsx());			boolean tiene_averias = control.tieneAverias(request.getParameter("codsx"));			boolean tiene_pedido = !peds.isEmpty();			if (control.tieneAverias(request.getParameter("codsx"))) {				mensaje = "No se puede activar la nacionalizacion, existen averías asociados a ella";			} else if (!peds.isEmpty()) {				mensaje = "No se puede activar la nacionalizacion, existen pedidos asociados a ella";			} else {				boolean resp = true;				// miro que no tenga PACKINGS!!!!				// new gstpacking().				int num = control.getNumeroPackingsNacionalizacion(entity.getnaccodsx());				if (num > 0) {					mensaje = "No se puede activar la nacionalizacion, existen PACKINGS asociados a ella";					resp = false;				}				// LA QUIERE FINALIZAR, aqui es donde resto el saldo no nac y lo pongo en saldo nac:				if (resp) {					beanConnector db = new beanConnector(false);					gstnacionalizacion_detalle gnacd = new gstnacionalizacion_detalle(db);					gstentrada gent = new gstentrada(db);					Collection dets = gnacd.getlistanacionalizacion_detalle(entity.getnaccodsx());					Iterator ite = dets.iterator();					try {						while (ite.hasNext()) {							nacionalizacion_detalle nacd = (nacionalizacion_detalle) ite.next();							entrada ent = gent.getentrada(nacd.getnadentrada());							String saldonac = util.Math.restar_bigdecimal(ent.getentsaldonac(), nacd.getnadcantidad()).toPlainString();							String saldosinnac = util.Math.sumar(ent.getentsaldosinnac(), nacd.getnadcantidad());							String saldonacf = util.Math.restar_bigdecimal(ent.getEntsaldonacf(), nacd.getnadcantidad()).toPlainString();							String saldosinnacf = util.Math.sumar(ent.getEntsaldosinnacf(), nacd.getnadcantidad());							ent.setentsaldonac(saldonac);							// ent.setentsaldosinnac(saldosinnac);							ent.setEntsaldonacf(saldonacf);							ent.setEntsaldosinnacf(saldosinnacf);							resp &= gent.updateentrada(ent);						}					} catch (SQLException ex) {						resp = false;					}					if (resp)						db.commit();					else						db.rollback();					// entity.setnacfecha(util.Fecha.getFecha());					entity.setnacestado("TRAMITE");					try {						control.updatenacionalizacion(entity);						nacionalizacion despues = control.getnacionalizacion(antes.getnaccodsx()) ;						control.crea_auditoria(antes.getnaccodsx(), "ACTIVAR", usu.getusucodsx(), antes.getResumen(), despues.getResumen());						mensaje = "Nacionalizacion Activada con exito";					} catch (SQLException e1) {						mensaje = "No se pudo activar la nacionalizacion";						e1.printStackTrace();					}				}			}			nacionalizacionForm temp = new nacionalizacionForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("nacionalizacionForm", temp);			destino = "nacionalizacion_datos";		}		// OPCION DE set:		if (opcion.equals("set")) {			nacionalizacion entity = control.getnacionalizacion(request.getParameter("codsx"));			nacionalizacionForm temp = new nacionalizacionForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("nacionalizacionForm", temp);			return mapping.findForward("nacionalizacion_datos");		}		// opcion de CREAR		if (opcion.equals("crear")) {			String nacempresa = _form.getnacempresa();			String nacfecha = _form.getnacfecha();			String nacingreso = _form.getnacingreso();			String nacestado = _form.getnacestado();			String nacdeclaracion = _form.getNacdeclaracion();			String nacfechadeclaracion = _form.getNacfechadeclaracion();			String nacfechaingresobodega = _form.getNacfechaingresobodega();			String nacpaginainicial = _form.getNacpaginainicial();			String nacpaginafinal = _form.getNacpaginafinal();			String nacdosia = _form.getNacdosia();			String nacobservaciones = _form.getNacobservaciones();			String nactipo = _form.getNactipo();			String nacconsec = _form.getNacconsec();			String nacconseczfp = _form.getNacconseczfp();			boolean resp = true;			try {				destino = "nacionalizacion_datos";				resp &= control.crearnacionalizacion(nacempresa, nacfecha, nacingreso, nacestado, nacdeclaracion, nacfechadeclaracion, nacfechaingresobodega, nacpaginafinal, nacpaginainicial, nacdosia, nacobservaciones, nactipo, "0", "0", "0", nacconsec, nacconseczfp);				nacionalizacion nac = control.getnacionalizacion(nacempresa, nacfecha, nacingreso);				// si creo bien la nacionalizacion, miro el tipo, si es global, traigo todas las referencias y las nacionalizo				if (nactipo.equals("GLOBAL"))					resp &= nacionalizacionGlobal(request, nac.getnaccodsx());				nacionalizacionForm nf = (nacionalizacionForm) request.getAttribute("nacionalizacionForm");				nf.setnaccodsx(nac.getnaccodsx());				nf.setopcion("update");				request.setAttribute("nacionalizacionForm", nf);				control.crea_auditoria(nac.getnaccodsx(), "CREAR", usu.getusucodsx(), "", nac.getResumen());				mensaje = "nacionalizacion Creado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el nacionalizacion: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			destino = "nacionalizacion_datos";			nacionalizacion nac = control.getnacionalizacion(_form.getnaccodsx());			nacionalizacion antes = nac;			if (_form.getnacestado().equals("FINALIZADO") && nac.getnacestado().equals("TRAMITE")) {				boolean resp = true;				// LA QUIERE FINALIZAR, aqui es donde resto el saldo no nac y lo pongo en saldo nac:				beanConnector db = new beanConnector(false);				gstnacionalizacion_detalle gnacd = new gstnacionalizacion_detalle(db);				gstentrada gent = new gstentrada(db);				Collection dets = gnacd.getlistanacionalizacion_detalle(_form.getnaccodsx());				Iterator ite = dets.iterator();				try {					while (ite.hasNext()) {						nacionalizacion_detalle nacd = (nacionalizacion_detalle) ite.next();						entrada ent = gent.getentrada(nacd.getnadentrada());						String saldonac = util.Math.sumar(ent.getentsaldonac(), nacd.getnadcantidad());						String saldosinnac = util.Math.restar_bigdecimal(ent.getentsaldosinnac(), nacd.getnadcantidad()).toPlainString();						String saldonacf = util.Math.sumar(ent.getEntsaldonacf(), nacd.getnadcantidad());						String saldosinnacf = util.Math.restar_bigdecimal(ent.getEntsaldosinnacf(), nacd.getnadcantidad()).toPlainString();						ent.setentsaldonac(saldonac);						// ent.setentsaldosinnac(saldosinnac);						ent.setEntsaldonacf(saldonacf);						ent.setEntsaldosinnacf(saldosinnacf);						resp &= gent.updateentrada(ent);					}				} catch (SQLException ex) {					resp = false;				}				if (resp)					db.commit();				else					db.rollback();			}			try {				// _form.setnacfecha(util.Fecha.getFecha());				control.updatenacionalizacion(_form);				nacionalizacion despues = control.getnacionalizacion(antes.getnaccodsx()) ;				control.crea_auditoria(antes.getnaccodsx(), "MODIFICAR", usu.getusucodsx(), antes.getResumen(), despues.getResumen());				mensaje = "nacionalizacion Actualizado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el nacionalizacion: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			try {				nacionalizacion antes = control.getnacionalizacion(codsx) ;				control.eliminar(codsx);				control.crea_auditoria(antes.getnaccodsx(), "ELIMINAR", usu.getusucodsx(), antes.getResumen(), "");				mensaje = "nacionalizacion Eliminado con Exito";				destino = "nacionalizacion";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el nacionalizacion: <br> " + e.getLocalizedMessage();			}		}		// Opcion de actualizar_consecutivo_zf		if (opcion.equals("xxactualizar_consecutivo_zf")) {			nacionalizacion entity = control.getnacionalizacion(request.getParameter("codsx"));			entity.setNacconsec(_form.getNacconsec());			entity.setNacconseczfp(_form.getNacconseczfp());			try {				control.updatenacionalizacion(entity);				mensaje = "Consecutivos de ZFP Actualizados con exito";			} catch (SQLException e1) {				mensaje = "No se pudieron actualizar los Consecutivos de ZFP";				e1.printStackTrace();			}			destino = "nacionalizacion_datos";		}		if (opcion.equals("zzzactualizar_consecutivo_zf")) {			nacionalizacion entity = control.getnacionalizacion(request.getParameter("codsx"));			destino = "nacionalizacion_datos";			try {				control.updatenacionalizacion(_form);				mensaje = "Consecutivos de ZFP Actualizados con exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudieron actualizar los Consecutivos de ZFP: <br> " + e.getLocalizedMessage();			}		}		if (opcion.equals("actualizar_consecutivo_zf")) {			nacionalizacion entity = control.getnacionalizacion(request.getParameter("codsx"));			String nacconsec = request.getParameter("nacconsec");// form.getNacconsec();			String nacconseczfp = request.getParameter("nacconseczfp");// _form.getNacconseczfp();			entity.setNacconseczfp(nacconseczfp);			entity.setNacconsec(nacconsec);			try {				control.updatenacionalizacion(entity);				mensaje = "Consecutivos de ZFP Actualizados con exito";			} catch (SQLException e) {				mensaje = mensaje = "No se pudieron actualizar los Consecutivos de ZFP: <br> " + e.getLocalizedMessage();				e.printStackTrace();			}			nacionalizacionForm temp = new nacionalizacionForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("nacionalizacionForm", temp);			destino = "nacionalizacion_datos";		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}	private boolean nacionalizacionGlobal(HttpServletRequest request, String naccodsx) {		beanConnector db = new beanConnector(false);		gstnacionalizacion_detalle gnacdet = new gstnacionalizacion_detalle(db);		gstentrada gent = new gstentrada(db);		gstnacionalizacion gnac = new gstnacionalizacion();		nacionalizacion nac = gnac.getnacionalizacion(naccodsx);		String mensaje = "";		boolean resp = true;		nacionalizacionForm nf = new nacionalizacionForm();		nf.llenar(nac);		request.setAttribute("nacionalizacionForm", nf);		Collection lista = gent.getlistaentradaByingreso_sinnac(nac.getnacingreso());		if (lista.size() == 0) {			mensaje = "Ya todo el Embarque esta nacionalizado";		} else {			Iterator ite = lista.iterator();			while (ite.hasNext()) {				entrada ent = (entrada) ite.next();				float saldosinnac = Float.parseFloat(ent.getentsaldosinnac());				float saldonac = Float.parseFloat(ent.getentsaldonac());				String nadpesoneto = ent.getentpesoneto();				String nadpesobruto = ent.getentpesobruto();				String nadcantidad = ent.getentsaldosinnac();				BigDecimal nadpesonetototal = new BigDecimal(nadpesoneto).multiply(new BigDecimal(nadcantidad));				BigDecimal nadpesobrutototal = new BigDecimal(nadpesobruto).multiply(new BigDecimal(nadcantidad));				String nadfob = ent.getEntvalor();				BigDecimal nadfobtotal = new BigDecimal(nadfob).multiply(new BigDecimal(nadcantidad));				try {					resp &= gnacdet.crearnacionalizacion_detalle(naccodsx, ent.getentcodsx(), ent.getentsaldosinnac(), ent.getentsaldosinnac(), nadpesoneto, nadpesonetototal.toPlainString(), nadpesobruto, nadpesobrutototal.toPlainString(), nadfob, nadfobtotal.toPlainString());					// ent.setentsaldonac( (saldonac + saldosinnac) + "" );					ent.setentsaldosinnac("0");					resp &= gent.updateentrada(ent);				} catch (SQLException e1) {					// TODO Auto-generated catch block					e1.printStackTrace();					resp = false;					mensaje = "No se pudo efectuar la nacionalizacion de todo el embarque <br>" + e1.getMessage();				}			}			if (resp) {				db.commit();				mensaje = "Embarque nacionalizado con exito en su totalidad";			} else				db.rollback();		}		return resp;	}}