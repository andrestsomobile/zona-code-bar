package ingreso.control;import ingreso.entity.referencia_trafico;import ingreso.form.referencia_traficoForm;import java.sql.SQLException;import java.util.Collection;import db.GstTabla;import db.beanConnector;/******************************************************** *****CLASE GENERADA CON generator V3.0 By pablito *******/public class gstreferencia_trafico extends GstTabla {	public gstreferencia_trafico() {		db = new beanConnector();		this.classEntidad = referencia_trafico.class;	}	public gstreferencia_trafico(beanConnector db) {		this.db = db;		this.classEntidad = referencia_trafico.class;	}	public Collection getlistareferencia_trafico() {		String consulta = " SELECT * FROM referencia_trafico";		return getLista(consulta);	}	public Collection getlistareferencia_trafico(String reftnumfacturatrafico) {		String consulta = " SELECT * FROM referencia_trafico where reftnumfacturatrafico=" + reftnumfacturatrafico;		return getLista(consulta);	}	public Collection getlistareferencia_trafico(String reftnumfacturatrafico, String start, String param) {		start = start == null ? "0" : start;		param = param == null ? "" : param;		String consulta = " select referencia_trafico.* from referencia_trafico, factura_trafico, producto " + " where  reftnumfacturatrafico  = ftrafcodsx and reftproducto = procodsx " + " and ( prodescripcion like '%" + param + "%' or promodelo like '%" + param + "%') " + " and ftrafcodsx="				+ reftnumfacturatrafico + "  limit " + this.maxfilas + " offset  " + (Integer.parseInt(start) * this.maxfilas);		return getLista(consulta);	}	public String getTotalReferencias(String trafcodsx) {		String cad = "select sum(reftcantidad)  from referencia_trafico, factura_trafico where reftnumfacturatrafico = ftrafcodsx and ftrafnumtrafico=" + trafcodsx;		return getCampo(cad);	}	public int getTotalPaginaslistareferencia_trafico(String reftnumfacturatrafico, String param) {		param = param == null ? "" : param;		String consulta = " select count(1) from referencia_trafico, factura_trafico, producto " + " where  reftnumfacturatrafico  = ftrafcodsx and reftproducto = procodsx " + " and ( prodescripcion like '%" + param + "%' or promodelo like '%" + param + "%') " + " and ftrafcodsx="				+ reftnumfacturatrafico;		return getPaginas(consulta);	}	public boolean crearreferencia_trafico(String reftnumfacturatrafico, String reftproducto, String reftcantidad, String reftpesoneto, String reftpesobruto, String reftfobunit, String reftfobtotal, String reftcifunit, String reftciftotal, String reftpesonetototal, String reftpesobrutototal,			String reftmpacks, String reftserial) throws SQLException {		String insert = "INSERT INTO referencia_trafico (reftnumfacturatrafico,reftproducto,reftcantidad,reftpesoneto," + "reftpesobruto,reftfobunit,reftfobtotal,reftcifunit,reftciftotal, reftpesonetototal, reftpesobrutototal, reftmpacks, reftserial) VALUES ("				+ (reftnumfacturatrafico == null ? "NULL" : "'" + reftnumfacturatrafico + "'") + "," + (reftproducto == null ? "NULL" : "'" + reftproducto + "'") + "," + (reftcantidad == null ? "NULL" : "'" + reftcantidad + "'") + "," + (reftpesoneto == null ? "NULL" : "'" + reftpesoneto + "'")				+ "," + (reftpesobruto == null ? "NULL" : "'" + reftpesobruto + "'") + "," + (reftfobunit == null ? "NULL" : "'" + reftfobunit + "'") + "," + (reftfobtotal == null ? "NULL" : "'" + reftfobtotal + "'") + "," + (reftcifunit == null ? "NULL" : "'" + reftcifunit + "'") + ","				+ (reftciftotal == null ? "NULL" : "'" + reftciftotal + "'") + "," + (reftpesonetototal == null ? "NULL" : "'" + reftpesonetototal + "'") + "," + (reftpesobrutototal == null ? "NULL" : "'" + reftpesobrutototal + "'") + "," + (reftmpacks == null ? "NULL" : "'" + reftmpacks + "'")				+ "," + (reftserial == null ? "NULL" : "'" + reftserial + "'")				+ ")";		int resp = db.executeUpdate(insert);		return resp == 0 ? false : true;	}	public referencia_trafico getreferencia_trafico(String reftcodsx) {		String cad = "SELECT * FROM referencia_trafico WHERE reftcodsx='" + reftcodsx + "'";		return (referencia_trafico) getEntidad(cad);	}	public referencia_trafico getreferencia_traficoUqKey(String reftnumfacturatrafico, String reftproducto, String reftserial) {		String cad = "SELECT * FROM referencia_trafico WHERE reftnumfacturatrafico='" + reftnumfacturatrafico + "' AND reftproducto = '" + reftproducto + "' AND reftserial = '" + reftserial + "'";		return (referencia_trafico) getEntidad(cad);	}	public boolean updatereferencia_trafico(referencia_trafico entity) throws SQLException {		String cad = " update referencia_trafico set  " + " reftnumfacturatrafico = " + (entity.getreftnumfacturatrafico() == null ? "NULL" : "'" + entity.getreftnumfacturatrafico() + "'") + "," + " reftproducto = "				+ (entity.getreftproducto() == null ? "NULL" : "'" + entity.getreftproducto() + "'") + "," + " reftcantidad = " + (entity.getreftcantidad() == null ? "NULL" : "'" + entity.getreftcantidad() + "'") + "," + " reftpesoneto = "				+ (entity.getreftpesoneto() == null ? "NULL" : "'" + entity.getreftpesoneto() + "'") + "," + " reftpesobruto = " + (entity.getreftpesobruto() == null ? "NULL" : "'" + entity.getreftpesobruto() + "'") + "," + " reftfobunit = "				+ (entity.getreftfobunit() == null ? "NULL" : "'" + entity.getreftfobunit() + "'") + "," + " reftfobtotal = " + (entity.getreftfobtotal() == null ? "NULL" : "'" + entity.getreftfobtotal() + "'") + "," + " reftcifunit = "				+ (entity.getreftcifunit() == null ? "NULL" : "'" + entity.getreftcifunit() + "'") + "," + " reftciftotal = " + (entity.getreftciftotal() == null ? "NULL" : "'" + entity.getreftciftotal() + "'") + "," + " reftpesonetototal = "				+ (entity.getReftpesonetototal() == null ? "NULL" : "'" + entity.getReftpesonetototal() + "'") + "," + " reftpesobrutototal = " + (entity.getReftpesobrutototal() == null ? "NULL" : "'" + entity.getReftpesobrutototal() + "'") + "," + " reftmpacks= "				+ (entity.getReftmpacks() == null ? "NULL" : "'" + entity.getReftmpacks() + "'") + "," + " reftserial = "				+ (entity.getreftserial() == null ? "NULL" : "'" + entity.getreftserial() + "'")+ " where reftcodsx = " + entity.getreftcodsx();		int resp = db.executeUpdate(cad);		return resp == 0 ? false : true;	}	public boolean updatereferencia_trafico(referencia_traficoForm entity) throws SQLException {		String cad = " update referencia_trafico set  " + " reftnumfacturatrafico = " + (entity.getreftnumfacturatrafico() == null ? "NULL" : "'" + entity.getreftnumfacturatrafico() + "'") + "," + " reftproducto = "				+ (entity.getreftproducto() == null ? "NULL" : "'" + entity.getreftproducto() + "'") + "," + " reftcantidad = " + (entity.getreftcantidad() == null ? "NULL" : "'" + entity.getreftcantidad() + "'") + "," + " reftpesoneto = "				+ (entity.getreftpesoneto() == null ? "NULL" : "'" + entity.getreftpesoneto() + "'") + "," + " reftpesobruto = " + (entity.getreftpesobruto() == null ? "NULL" : "'" + entity.getreftpesobruto() + "'") + "," + " reftfobunit = "				+ (entity.getreftfobunit() == null ? "NULL" : "'" + entity.getreftfobunit() + "'") + "," + " reftfobtotal = " + (entity.getreftfobtotal() == null ? "NULL" : "'" + entity.getreftfobtotal() + "'") + "," + " reftcifunit = "				+ (entity.getreftcifunit() == null ? "NULL" : "'" + entity.getreftcifunit() + "'") + "," + " reftciftotal = " + (entity.getreftciftotal() == null ? "NULL" : "'" + entity.getreftciftotal() + "'") + "," + " reftpesonetototal = "				+ (entity.getReftpesonetototal() == null ? "NULL" : "'" + entity.getReftpesonetototal() + "'") + "," + " reftpesobrutototal = " + (entity.getReftpesobrutototal() == null ? "NULL" : "'" + entity.getReftpesobrutototal() + "'") + "," + " reftmpacks= "				+ (entity.getReftmpacks() == null ? "NULL" : "'" + entity.getReftmpacks() + "'") + "," + " reftserial = "				+ (entity.getReftserial() == null ? "NULL" : "'" + entity.getReftserial() + "'") + "," + " reftserialdespacho = "				+ (entity.getReftserialdespacho() == null ? "NULL" : "'" + entity.getReftserialdespacho() + "'") + " where reftcodsx = " + entity.getreftcodsx();		int resp = db.executeUpdate(cad);		return resp == 0 ? false : true;	}	public boolean eliminar(String reftcodsx) throws SQLException {		referencia_trafico referencia = getreferencia_trafico(reftcodsx);		String elim = " delete from referencia_trafico where reftcodsx = '" + reftcodsx + "'";		int r = db.executeUpdate(elim);		return r == 0 ? false : true;	}	public Collection getlistareferencia_traficoByTrafico(String trafcodsx) {		String consulta = " SELECT referencia_trafico.* FROM referencia_trafico, factura_trafico where reftnumfacturatrafico = ftrafcodsx " + " and ftrafnumtrafico = " + trafcodsx;		return getLista(consulta);	}	public Collection getlistareferencia_traficoByProducto(String reftproducto) {    	String consulta = " select referencia_trafico.* from referencia_trafico " + " where reftserial != '' and reftserialdespacho ='N' and reftproducto = " + reftproducto + " order by reftserial";		return getLista(consulta);	}		public Collection getlistaInv_referencia_trafico(String codcia) {	   	String consulta = " select promodelo,reftserial,reftcantidad from referencia_trafico,producto where reftproducto = procodsx and reftserialdespacho = 'N' and procodigocia = " + codcia;		return getListaDeListas(consulta);	}		public boolean setdespachoreferencia_trafico(String reftcodsx, String valor) throws SQLException {		String cad = " update referencia_trafico set  " + " reftserialdespacho = '" + valor + "' where reftcodsx = " + reftcodsx;		int resp = db.executeUpdate(cad);		return resp == 0 ? false : true;	}		public boolean setdespachoreferencia_traficoBySerial(String serial, String valor) throws SQLException {		String cad = " update referencia_trafico set " + " reftserialdespacho = '" + valor + "' where reftserial = '" + serial + "'";		int resp = db.executeUpdate(cad);		return resp == 0 ? false : true;	}		public Collection getlistareferencia_trafico_lote(String trafico, String start, String param) {		start = start == null ? "0" : start;		param = param == null ? "" : param;		String consulta = " select "				+ "reftcodsx, ftrafnumfactura as reftnumfacturatrafico, reftproducto, reftcantidad, reftpesoneto, reftpesobruto, " 				+ "reftfobunit, reftfobtotal, reftcifunit, reftciftotal, reftpesonetototal, reftpesobrutototal, " 				+ "reftmpacks, promodelo as reftserial, prodescripcion as reftserialdespacho"				+ " from referencia_trafico, factura_trafico, producto " 				+ " where  reftnumfacturatrafico  = ftrafcodsx and reftproducto = procodsx " 				+ " and ( prodescripcion like '%" + param + "%' or promodelo like '%" + param + "%') " 				+ " and ftrafnumtrafico =" + trafico + "  limit " + this.maxfilas + " offset  " + (Integer.parseInt(start) * this.maxfilas);		return getLista(consulta);	}	public int getTotalPaginaslistareferencia_trafico_lote(String trafico, String param) {		param = param == null ? "" : param;		String consulta = " select count(1) from referencia_trafico, factura_trafico, producto " 		+ " where  reftnumfacturatrafico  = ftrafcodsx and reftproducto = procodsx " 				+ " and ( prodescripcion like '%" + param + "%' or promodelo like '%" + param + "%') " + " and ftrafnumtrafico ="				+ trafico;		return getPaginas(consulta);	}}