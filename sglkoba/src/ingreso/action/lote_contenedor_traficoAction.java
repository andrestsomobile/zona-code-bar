package ingreso.action;import java.io.IOException;import java.sql.SQLException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import ingreso.control.gstlote_contenedor_trafico;import ingreso.control.gstlote_trafico;import ingreso.entity.lote_contenedor_trafico;import ingreso.entity.lote_trafico;import ingreso.form.lote_contenedor_traficoForm;public final class lote_contenedor_traficoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		lote_contenedor_traficoForm _form = (lote_contenedor_traficoForm) form;		gstlote_contenedor_trafico control = new gstlote_contenedor_trafico();		gstlote_trafico glt = new gstlote_trafico();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String destino = "";		// OPCION DE set:		if (opcion.equals("set")) {			lote_contenedor_trafico entity = control.getlote_contenedor_trafico(request.getParameter("codsx"));			lote_contenedor_traficoForm temp = new lote_contenedor_traficoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("lote_contenedor_traficoForm", temp);			lote_trafico lt = glt.getlote_trafico(temp.getlctraflote());			request.setAttribute("trafcodsx", lt.getLtrafnumtrafico());			return mapping.findForward("lote_contenedor_trafico_datos");		}		String mensaje = "";		// opcion de CREAR		if (opcion.equals("crear")) {			String lctrafcontenedor = _form.getlctrafcontenedor();			String lctraflote = _form.getlctraflote();			String lctrafcantidad = _form.getlctrafcantidad();			try {				control.crearlote_contenedor_trafico(lctrafcontenedor, lctraflote, lctrafcantidad);				mensaje = "lote_contenedor_trafico Creado con Exito";				lote_trafico lt = glt.getlote_trafico(_form.getlctraflote());				request.setAttribute("trafcodsx", lt.getLtrafnumtrafico());								destino = "lote_contenedor_trafico";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el lote_contenedor_trafico: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				control.updatelote_contenedor_trafico(_form);				mensaje = "lote_contenedor_trafico Actualizado con Exito";				lote_trafico lt = glt.getlote_trafico(_form.getlctraflote());				request.setAttribute("trafcodsx", lt.getLtrafnumtrafico());								destino = "lote_contenedor_trafico";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el lote_contenedor_trafico: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			try {				lote_contenedor_trafico lctraf = control.getlote_contenedor_trafico(codsx);				lote_trafico lt = glt.getlote_trafico(lctraf.getlctraflote());				request.setAttribute("trafcodsx", lt.getLtrafnumtrafico());							control.eliminar(codsx);				mensaje = "lote_contenedor_trafico Eliminado con Exito";						destino = "lote_contenedor_trafico";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el lote_contenedor_trafico: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}