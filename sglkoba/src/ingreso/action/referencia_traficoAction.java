package ingreso.action;import static util.validador.validarNumero;import static util.validador.isNumeric;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.math.BigDecimal;import javax.servlet.ServletException;import java.sql.SQLException;import maestro.control.gstproducto;import maestro.entity.producto;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.*;import ingreso.control.*;import ingreso.entity.*;import ingreso.form.*;import org.apache.struts.action.*;import pedido.entity.referencia_pedido;import util.Fecha;import util.Math;public final class referencia_traficoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form,			HttpServletRequest request, HttpServletResponse response)			throws IOException, ServletException {		referencia_traficoForm _form = (referencia_traficoForm) form;		gstreferencia_trafico control = new gstreferencia_trafico();		gsttrafico gtraf = new gsttrafico();		gstproducto gprod = new gstproducto();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear"				: opcion;		// OPCION DE set:		if (opcion.equals("set")) {			referencia_trafico entity = control.getreferencia_trafico(request					.getParameter("codsx"));			referencia_traficoForm temp = new referencia_traficoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("referencia_traficoForm", temp);			request					.setAttribute("trafcodsx", request							.getParameter("trafcodsx"));			return mapping.findForward("referencia_trafico_datos");		}		String mensaje = "";		// opcion de CREAR		if (opcion.equals("crear")) {			String reftnumfacturatrafico = _form.getreftnumfacturatrafico();			String reftproducto = _form.getreftproducto();			String reftcantidad = _form.getreftcantidad();			String reftpesoneto = _form.getreftpesoneto();			String reftpesobruto = _form.getreftpesobruto();			String reftfobunit = _form.getreftfobunit();			String reftfobtotal = Math.multiplicar(reftcantidad, reftfobunit);			BigDecimal pesonetototal = new BigDecimal(reftcantidad)					.multiply(new BigDecimal(reftpesoneto));			BigDecimal pesobrutototal = new BigDecimal(reftcantidad)					.multiply(new BigDecimal(reftpesobruto));			producto prod = gprod.getproducto(reftproducto);			String mpacks = util.Math.dividir_bigdecimal(reftcantidad,					prod.getprounimasterpac()).toPlainString();			String reftserial = _form.getReftserial();			try {				control.crearreferencia_trafico(reftnumfacturatrafico,						reftproducto, reftcantidad, reftpesoneto,						reftpesobruto, reftfobunit, reftfobtotal, "0", "0",						pesonetototal.toPlainString(), pesobrutototal								.toPlainString(), mpacks, reftserial);				gtraf.actualiar_CIF_referencias(request						.getParameter("trafcodsx"));				mensaje = "Referencia Creado con Exito en el trafico";				request.setAttribute("trafcodsx", request						.getParameter("trafcodsx"));				request.setAttribute("ftrafcodsx", reftnumfacturatrafico);			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear la Referencia en el Trafico: <br> "						+ e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				BigDecimal reftfobtotal = Math.multiplicar_bigdecimnal(_form						.getreftcantidad(), _form.getreftfobunit());				_form.setreftfobtotal(reftfobtotal.toPlainString());				BigDecimal pesonetototal = new BigDecimal(_form						.getreftcantidad()).multiply(new BigDecimal(_form						.getreftpesoneto()));				BigDecimal pesobrutototal = new BigDecimal(_form						.getreftcantidad()).multiply(new BigDecimal(_form						.getreftpesobruto()));				producto prod = gprod.getproducto(_form.getreftproducto());				String mpacks = util.Math.dividir_bigdecimal(						_form.getreftcantidad(), prod.getprounimasterpac())						.toPlainString();				_form.setReftpesonetototal(pesonetototal.toPlainString());				_form.setReftpesobrutototal(pesobrutototal.toPlainString());				_form.setReftmpacks(mpacks);				control.updatereferencia_trafico(_form);				gtraf.actualiar_CIF_referencias(request						.getParameter("trafcodsx"));				mensaje = "Referencia Actualizada con Exito";				request.setAttribute("trafcodsx", request						.getParameter("trafcodsx"));				request.setAttribute("ftrafcodsx", _form						.getreftnumfacturatrafico());			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar La Referencia en el Trafico: <br> "						+ e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			try {				control.eliminar(codsx);				mensaje = "Referencia  Eliminado con Exito";				gtraf.actualiar_CIF_referencias(request						.getParameter("trafcodsx"));				request.setAttribute("trafcodsx", request						.getParameter("trafcodsx"));				request.setAttribute("ftrafcodsx", _form						.getreftnumfacturatrafico());			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el referencia_trafico: <br> "						+ e.getLocalizedMessage();			}		}		// Opcion de crear por archivo plano		if (opcion.equals("plano")) {			String trafcodsx = request.getParameter("trafcodsx");			request.setAttribute("trafcodsx", trafcodsx);			String contenedor[];			String linea;			String resultado = "\n";			int i = 1;			HttpSession se = request.getSession(true);			try {				// ruta que llego para sacar nombre del arhivo				String ruta_llego = request.getParameter("ruta"); 				File f = new File(ruta_llego);				//String ruta = (String) se.getAttribute("ruta_upload") + f.getName();// ruta donde quedo subido el archivo				String nombrearch = f.getName();				nombrearch = nombrearch.substring(nombrearch.lastIndexOf("\\") + 1, nombrearch.length());				String ruta = (String) se.getAttribute("ruta_upload") + nombrearch;// ruta donde quedo subido el archivo				System.out.println("ruta: "+ruta);				FileReader fr = new FileReader(ruta);				BufferedReader entrada = new BufferedReader(fr);				try {					while ((linea = entrada.readLine()) != null) {						if (linea != "\n") {							// texto += linea + " \n";							contenedor = linea.split(";");							//System.out.println("linea : "+linea);							//System.out.println("contenedor : "+contenedor.length);														//if ((contenedor.length != 6)) {							if ((contenedor.length != 6 && contenedor.length !=7 )) {								resultado += "Las referencia en la linea #"										+ i										+ " presenta espacios en blanco o contiene mas de los campos necesarios\n<br>";							} else {								String reftnumfacturatrafico = contenedor[0];								String reftproducto_modelo = contenedor[1];								String reftcantidad = contenedor[2];System.out.println("reftcantidad : "+reftcantidad);								String reftpesoneto = contenedor[3];System.out.println("reftpesoneto : "+reftpesoneto);								String reftpesobruto = contenedor[4];								String reftfobunit = contenedor[5];								String reftserial = "";								if (contenedor.length == 7){									reftserial = contenedor[6];								}																	trafico tr = null;								boolean errores = false;								// validaciones								if (trafcodsx.equals("") || trafcodsx == null) {									resultado += "No se encontro un trafico\n<br>";									errores = true;								} else {									// cargo los datos del trafico									gsttrafico gsttrafico = new gsttrafico();									tr = gsttrafico.gettrafico(trafcodsx);									if (tr == null) {										resultado += "No se encontro un trafico\n<br>";										errores = true;									}								}								//factura								gstfactura_trafico gstft = new gstfactura_trafico();								factura_trafico ft = gstft.getfactura_trafico(reftnumfacturatrafico,trafcodsx);								//verifico si esta la factura								if (ft == null) {									resultado += "El numero de factura ["											+ reftnumfacturatrafico											+ "] no existe en el trafico ["											+ trafcodsx + "]\n<br>";									errores = true;								}								//producto								gstproducto gstproducto = new gstproducto();								producto producto=null;								if(tr != null){									// verifico si para esa compania existe ese producto									producto = gstproducto.getproductoByUk(tr.gettrafcompania(),reftproducto_modelo);									if (producto == null) {										resultado += "No existe la referencia ["												+ reftproducto_modelo + "]\n<br>";										errores = true;									}								}else{									resultado += "No existe la referencia ["										+ reftproducto_modelo + "]\n<br>";									errores = true;								}								// valido la cantidad								if (!isNumeric(reftcantidad)){									resultado += "El valor cantidad ["+ reftcantidad+ "] debe ser numerico\n<br>";									errores = true;								} else {									if(Integer.parseInt(reftcantidad) <= 0){										resultado += "El valor cantidad ["+ reftcantidad+ "] debe ser positivo o mayor que 0\n<br>";										errores = true;									}								}																//valido pesoneto 								if (!validarNumero(reftpesobruto)) {									resultado += "El valor de peso bruto ["+ reftpesobruto+ "] debe ser numerico\n<br>";									errores = true;								} else {									if(Float.parseFloat(reftpesoneto) < 0){										resultado += "El valor de peso bruto ["+ reftpesobruto+ "] debe ser mayor o igual a cero\n<br>";										errores = true;									}								}																//valido peso bruto								if (!validarNumero(reftpesoneto)) {									resultado += "El valor de peso neto ["+ reftcantidad+ "] debe ser numerico\n<br>";									errores = true;								} else {									if(Float.parseFloat(reftpesoneto) < 0){										resultado += "El valor de peso neto ["+ reftcantidad+ "] debe ser mayor o igual a cero\n<br>";										errores = true;									}								}																//valido valor unitario								if (!validarNumero(reftfobunit)) {									resultado += "El valor unitario ["+ reftfobunit+ "] debe ser numerico\n<br>";									errores = true;								} else {									if(Float.parseFloat(reftfobunit) < 0){										resultado += "El valor unitario ["+ reftfobunit+ "] debe ser mayor o igual a cero\n<br>";										errores = true;									}									reftfobunit=Float.parseFloat(reftfobunit)+"";								}																//verfico si ya esta creado esa factura en ese trafico								if(ft!=null && producto!=null){									referencia_trafico ref_t= control.getreferencia_traficoUqKey(ft.getftrafcodsx(), producto.getprocodsx(), reftserial );									if(ref_t!=null){										resultado += "la referencia ["+reftproducto_modelo+"-"+reftserial+"] ya existe en la factura["+reftnumfacturatrafico+"]\n<br>";										errores = true;									}								}																								if(!errores){//si no hay errores calculo el resto de datos									String reftfobtotal=Math.multiplicar(reftcantidad,reftfobunit);									String reftcifunit="0";									String reftciftotal="0";									String reftpesonetototal=Math.multiplicar(reftcantidad,reftpesoneto);									String reftpesobrutototal=Math.multiplicar(reftcantidad,reftpesobruto);									String reftmpacks = util.Math.dividir_bigdecimal(reftcantidad,											producto.getprounimasterpac()).toPlainString();									//inserto la referencia trafico									try {										control.crearreferencia_trafico(ft.getftrafcodsx(),												producto.getprocodsx(), reftcantidad, reftpesoneto,												reftpesobruto, reftfobunit, reftfobtotal, reftcifunit, reftciftotal,												reftpesonetototal, reftpesobrutototal, reftmpacks,reftserial);										//gtraf.actualiar_CIF_referencias(request.getParameter("trafcodsx"));										resultado += "la referencia ["+reftproducto_modelo+"] en la factura["+reftnumfacturatrafico+"] FUE CREADA CON EXITO\n<br>";										request.setAttribute("trafcodsx", request												.getParameter("trafcodsx"));										request.setAttribute("ftrafcodsx", reftnumfacturatrafico);									} catch (SQLException e) {										resultado += "No se pudo crear la referencia["+reftproducto_modelo+"-"+reftserial+"] en la factura ["+reftnumfacturatrafico+"]\n<br>";									}								}							}						}						i++;					}				} catch (IOException e) {					resultado = "No se pudo leer el archivo, Intente de nuevo\n<br>";				}			} catch (FileNotFoundException e) {				resultado += "No se encontro el arhivo, Intente de nuevo\n<br>";			}						try {				gtraf.actualiar_CIF_referencias(request.getParameter("trafcodsx"));				String ruta_block=(String) se.getAttribute("ruta_upload")+"err_ref_trafico"+Fecha.getFechaSinHora()+"_"+Fecha.getHora("-")+".txt";			    FileWriter fw = new FileWriter(ruta_block);		    	BufferedWriter bw = new BufferedWriter(fw);			    PrintWriter salida = new PrintWriter(bw);			    salida.println("BLOC DE ERRORES <br>\n INGRESO DE REFERENCIAS A TRAFICO <br>\n"+"FECHA : "+Fecha.getFecha()+"<br>\n"+"OBSERVACIONES :\n<br>"+resultado);			    salida.close();			    mensaje = "Proceso Automatico Terminado... Para detalle sobre Observaciones Verifique Bloc de Errores";			}			catch(java.io.IOException ioex){				System.out.println("error_archivo");			}			ActionMessages e = getErrors(request);			e.add("general", new ActionMessage(mensaje, false));			addErrors(request, e);			return mapping.findForward("factura_trafico");		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward("referencia_trafico");	}}