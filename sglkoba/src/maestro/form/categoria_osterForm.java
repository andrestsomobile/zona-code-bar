package maestro.form;import javax.servlet.http.HttpServletRequest;import maestro.control.gstcategoria_oster;import maestro.entity.categoria_oster;import org.apache.struts.action.ActionErrors;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;public class categoria_osterForm extends ActionForm {	private String catocodsx;	private String catodescripcion;	private String opcion;	public void setopcion(String newopcion) {		this.opcion = newopcion;	}	public String getopcion() {		return this.opcion;	}	public String getcatocodsx() {		return catocodsx;	}	public void setcatocodsx(String catocodsx) {		this.catocodsx = catocodsx;	}	public String getcatodescripcion() {		return catodescripcion;	}	public void setcatodescripcion(String catodescripcion) {		this.catodescripcion = catodescripcion;	}	public void reset(ActionMapping mapping, HttpServletRequest request) {	}	public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {		ActionErrors errors = new ActionErrors();		gstcategoria_oster gcategoria_oster = new gstcategoria_oster();		opcion = opcion == null || opcion.equals("") ? "crear" : opcion;		if (opcion.equals("set") || opcion.equals("delete"))			return null;		// @todo COMPLETAR EL CREAR, SOLO LLAVES UNICAS O REPETIDAS		// valido campos requeridos:		if (catodescripcion.equals(""))			errors.add("catodescripcion", new ActionMessage("<b>La descripcion no puede ser vacia</b>", false));		if (!errors.isEmpty())			errors.add("general", new ActionMessage("<b>No se pudo guardar los datos, revise </b>", false));		return errors;	}	public void llenar(categoria_oster entity) {		this.catocodsx = entity.getcatocodsx();		this.catodescripcion = entity.getcatodescripcion();	}}