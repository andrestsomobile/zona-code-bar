package maestro.control;import java.sql.SQLException;import java.util.Collection;import maestro.entity.producto;import maestro.form.productoForm;import util.Listado;import db.GstTabla;import db.beanConnector;/******************************************************************************* * CLASE GENERADA CON generator V3.0 By pablito**** ******************************************************************************/public class gstproducto extends GstTabla {	public gstproducto() {		db = new beanConnector();		this.classEntidad = producto.class;	}	public gstproducto(beanConnector db) {		this.db = db;		this.classEntidad = producto.class;	}	public Collection getlistaproducto() {		String consulta = " SELECT * FROM producto";		return getLista(consulta);	}	public Collection getlistaproducto(String start, String param) {		start = start == null ? "0" : start;		param = param == null ? "" : param;		String consulta = "SELECT producto.* FROM producto where" +			   getTextoBusquedaResumen(param) + " order by procodsx desc "+				" limit "				+ this.maxfilas + " offset  "				+ (Integer.parseInt(start) * this.maxfilas);				return getLista(consulta);	}	public int getTotalPaginaslistaproducto(String param) {		param = param == null ? "" : param;		String consulta = " SELECT count(1) FROM producto where  " +				getTextoBusquedaResumen(param);		return getPaginas(consulta);	}				public Collection getlistaproducto(String procodigocia, String start, String param) {			start = start == null ? "0" : start;			param = param == null ? "" : param;			String consulta = " SELECT * FROM producto where procodigocia = " + procodigocia + "  and "+					getTextoBusquedaResumen(param) + " order by procodsx desc "+					"limit "					+ this.maxfilas + " offset  "					+ (Integer.parseInt(start) * this.maxfilas);			return getLista(consulta);		}						/**		 * me retorna una lista con los productos de una categoria		 * @param procodigocia		 * @param procategoria		 * @return		 */		public Collection getlistaproductoCategoria(String procodigocia, String procategoria) {			String consulta = " SELECT * FROM producto where procodigocia = " + procodigocia + "  and "+					" procategoria = "+procategoria+" order by procodsx desc ";			System.out.println(consulta);			return getLista(consulta);		}		public int getTotalPaginaslistaproducto(String procodigocia, String param) {			param = param == null ? "" : param;			String consulta = " SELECT count(1) FROM producto where  "					+ " procodigocia =" + procodigocia+ " and " +					getTextoBusquedaResumen(param);			return getPaginas(consulta);		}				public Collection getProductoByTrafico(String procodigocia, String trafico) {			String consulta = " select producto.* "+ 							" from producto, referencia_trafico, factura_trafico  "+							" where  procodsx = reftproducto and reftnumfacturatrafico = ftrafcodsx and  ftrafnumtrafico = "+ trafico + "  and procodigobarra = '"+ procodigocia + "' ";			return getLista(consulta);		}						public Collection getlistaproductoByTrafico(String procodigocia,String trafico, String start, String param) {			start = start == null ? "0" : start;			param = param == null ? "" : param;			String consulta = " select procodsx, procodigocia, prodescripcion, procategoria, promodelo, prosubpartida, proean, procodbarra, progarantia, "+  							"	reftpesoneto as prokiloreal, "+							"	reftpesobruto as provolumen, reftfobunit as prokilovolumen, prouniempaque, prokvuniempaque, provoluniempaque, prounimasterpac, prokvmasterpack, propesobmp, '' as resumen ,provolmasterpac, procodigobarra, proestado, proobservacion, protipoproducto,"+							"   prolargo,proalto,proancho,procatoster, proump "+							"	from producto, referencia_trafico, factura_trafico  "+							"	where  procodsx = reftproducto and reftnumfacturatrafico = ftrafcodsx and  ftrafnumtrafico = "+  trafico + "  and procodigocia = "+ procodigocia + " and "+ 							"	( 	prodescripcion like '%"+ param + "%' or promodelo like '%"+ param + "%' 	)    "+							"	group by procodsx, procodigocia, prodescripcion, procategoria, promodelo, prosubpartida, proean, procodbarra, progarantia, prokiloreal, "+							"	provolumen, reftfobunit, prouniempaque, prokvuniempaque, provoluniempaque, prounimasterpac, prokvmasterpack, propesobmp, reftpesoneto, reftpesobruto, provolmasterpac,procodigobarra, proestado, proobservacion, protipoproducto,prolargo,proalto,proancho,procatoster"+ 							" order by procodsx desc "+							"	limit "					+ this.maxfilas + " offset  "					+ (Integer.parseInt(start) * this.maxfilas);							return getLista(consulta);		}		public int getTotalPaginaslistaproductoByTrafico(String procodigocia, String trafico, String param) {			param = param == null ? "" : param;			String consulta = " select count(distinct procodsx) "+ 							" from producto, referencia_trafico, factura_trafico  "+							" where  procodsx = reftproducto and reftnumfacturatrafico = ftrafcodsx and  ftrafnumtrafico = "+ trafico + "  and procodigocia = "+ procodigocia + " and "+ 							" ( 	prodescripcion like '%"+ param + "%' or promodelo like '%" + param +"%' 	)  ";		return getPaginas(consulta);		}	public boolean crearproducto(String procodigocia, String prodescripcion,			String procategoria, String promodelo, String prosubpartida,			String proean, String procodbarra, String progarantia,			String prokiloreal, String provolumen, String prokilovolumen,			String prouniempaque, String prokvuniempaque,			String provoluniempaque, String prounimasterpac,			String prokvmasterpack, String propesobmp, String provolmasterpac, 			String procodigobarra, String proestado, String proobservacion, String protipoproducto, 			String prolargo, String proalto, String proancho, String procatoster, String proump) throws SQLException {				float kiloVolumen = java.lang.Float.parseFloat(provolumen) * 400;		float kvUEmp = java.lang.Float.parseFloat(prouniempaque) * kiloVolumen;		float volUniEmp = java.lang.Float.parseFloat(provolumen)				* java.lang.Float.parseFloat(prouniempaque);		float kvolmpack = Float.parseFloat( provolmasterpac )* 400;		prokilovolumen = String.valueOf(kiloVolumen);		prokvuniempaque = String.valueOf(kvUEmp);		provoluniempaque = String.valueOf(volUniEmp);		prokvmasterpack = kvolmpack + "";				String insert = "INSERT INTO producto (procodigocia,prodescripcion,procategoria,promodelo,prosubpartida," +				"proean,procodbarra,progarantia,prokiloreal,provolumen,prokilovolumen," +				"prouniempaque,prokvuniempaque,provoluniempaque,prounimasterpac,prokvmasterpack," +				"propesobmp,provolmasterpac, procodigobarra, proestado, proobservacion, protipoproducto,prolargo,proalto," +				"proancho,procatoster,proump) VALUES ("				+ (procodigocia == null ? "NULL" : "'" + procodigocia + "'")				+ ","				+ (prodescripcion == null ? "NULL" : "'" + prodescripcion + "'")				+ ","				+ (procategoria == null ? "NULL" : "'" + procategoria + "'")				+ ","				+ (promodelo == null ? "NULL" : "'" + promodelo + "'")				+ ","				+ (prosubpartida == null ? "NULL" : "'" + prosubpartida + "'")				+ ","				+ (proean == null ? "NULL" : "'" + proean + "'")				+ ","				+ (procodbarra == null ? "NULL" : "'" + procodbarra + "'")				+ ","				+ (progarantia == null ? "NULL" : "'" + progarantia + "'")				+ ","				+ (prokiloreal == null ? "NULL" : "'" + prokiloreal + "'")				+ ","				+ (provolumen == null ? "NULL" : "'" + provolumen + "'")				+ ","				+ (prokilovolumen == null ? "NULL" : "'" + prokilovolumen + "'")				+ ","				+ (prouniempaque == null ? "NULL" : "'" + prouniempaque + "'")				+ ","				+ (prokvuniempaque == null ? "NULL" : "'" + prokvuniempaque						+ "'")				+ ","				+ (provoluniempaque == null ? "NULL" : "'" + provoluniempaque						+ "'")				+ ","				+ (prounimasterpac == null ? "NULL" : "'" + prounimasterpac						+ "'")				+ ","				+ (prokvmasterpack == null ? "NULL" : "'" + prokvmasterpack + "'")				+ ","				+ (propesobmp == null ? "NULL" : "'" + propesobmp + "'") 				+ ","				+ (provolmasterpac== null ? "NULL" : "'" + provolmasterpac+ "'")				+", " + ( procodigobarra==null ?"NULL" : "'" +  procodigobarra + "'" )				+", " + ( proestado==null ?"NULL" : "'" +  proestado + "'" )				+", " + ( proobservacion==null ?"NULL" : "'" +  proobservacion + "'" )				+", " + ( protipoproducto==null ?"NULL" : "'" +  protipoproducto + "'" )				+", " + ( prolargo==null ?"NULL" : "'" +  prolargo + "'" )				+", " + ( proalto==null ?"NULL" : "'" +  proalto + "'" )				+", " + ( proancho==null ?"NULL" : "'" +  proancho + "'" )				+", " + ( procatoster==null || (procatoster != null && procatoster.equals("")) ?"NULL" : "'" +  procatoster + "'" )							+", " + ( proump==null ?"NULL" : "'" +  proump + "'" )				+ ")";		int resp = db.executeUpdate(insert);		return resp == 0 ? false : true;	}	public producto getproducto(String procodsx) {		String cad = "SELECT * FROM producto WHERE procodsx='" + procodsx + "'";		return (producto) getEntidad(cad);	}	public producto getproductoByUk(String procodigocia, String promodelo) {		String cad = "SELECT * FROM producto WHERE procodigocia='"				+ procodigocia + "' AND promodelo ='" + promodelo + "'";		return (producto) getEntidad(cad);	}		public producto getproductoModelo(String promodelo) {		String cad = "SELECT * FROM producto WHERE promodelo ='" + promodelo + "'";		return (producto) getEntidad(cad);	}	public boolean updateproducto(producto entity) throws SQLException {		float kiloVolumen = java.lang.Float.parseFloat(entity.getprovolumen()) * 400;		float kvUEmp = java.lang.Float.parseFloat(entity.getprouniempaque()) * kiloVolumen;		float volUniEmp = java.lang.Float.parseFloat(entity.getprovolumen())				* java.lang.Float.parseFloat(entity.getprouniempaque());		float kvmasterpack = java.lang.Float.parseFloat(entity.getprounimasterpac())				* kiloVolumen;		float pesobmp = java.lang.Float.parseFloat(entity.getprounimasterpac())				* java.lang.Float.parseFloat(entity.getprokiloreal());		entity.setprokilovolumen(String.valueOf(kiloVolumen));		entity.setprokvuniempaque(String.valueOf(kvUEmp));		entity.setprovoluniempaque(String.valueOf(volUniEmp));		entity.setprokvmasterpack(String.valueOf(kvmasterpack));		entity.setpropesobmp(String.valueOf(pesobmp));				String cad = " update producto set  "				+ " procodigocia = "				+ (entity.getprocodigocia() == null ? "NULL" : "'"						+ entity.getprocodigocia() + "'")				+ ", prodescripcion = "				+ (entity.getprodescripcion() == null ? "NULL" : "'"						+ entity.getprodescripcion() + "'")				+ ", procategoria = "				+ (entity.getprocategoria() == null ? "NULL" : "'"						+ entity.getprocategoria() + "'")				+ ", promodelo = "				+ (entity.getpromodelo() == null ? "NULL" : "'"						+ entity.getpromodelo() + "'")				+ ", prosubpartida = "				+ (entity.getprosubpartida() == null ? "NULL" : "'"						+ entity.getprosubpartida() + "'")				+ ", proean = "				+ (entity.getproean() == null ? "NULL" : "'"						+ entity.getproean() + "'")				+ ", procodbarra = "				+ (entity.getprocodbarra() == null ? "NULL" : "'"						+ entity.getprocodbarra() + "'")				+ ", progarantia = "				+ (entity.getprogarantia() == null ? "NULL" : "'"						+ entity.getprogarantia() + "'")				+ ", prokiloreal = "				+ (entity.getprokiloreal() == null ? "NULL" : "'"						+ entity.getprokiloreal() + "'")				+ ", provolumen = "				+ (entity.getprovolumen() == null ? "NULL" : "'"						+ entity.getprovolumen() + "'")				+ ", prokilovolumen = "				+ (entity.getprokilovolumen() == null ? "NULL" : "'"						+ entity.getprokilovolumen() + "'")				+ ", prouniempaque = "				+ (entity.getprouniempaque() == null ? "NULL" : "'"						+ entity.getprouniempaque() + "'")				+ ", prokvuniempaque = "				+ (entity.getprokvuniempaque() == null ? "NULL" : "'"						+ entity.getprokvuniempaque() + "'")				+ ", provoluniempaque = "				+ (entity.getprovoluniempaque() == null ? "NULL" : "'"						+ entity.getprovoluniempaque() + "'")				+ ", prounimasterpac = "				+ (entity.getprounimasterpac() == null ? "NULL" : "'"						+ entity.getprounimasterpac() + "'")				+ ", prokvmasterpack = "				+ (entity.getprokvmasterpack() == null ? "NULL" : "'" 	+ entity.getprokvmasterpack() + "'")				+ ", propesobmp = "	+ (entity.getpropesobmp() == null ? "NULL" : "'"+ entity.getpropesobmp() + "'") 				+ ", provolmasterpac = "	+ (entity.getProvolmasterpac() == null ? "NULL" : "'"+ entity.getProvolmasterpac() + "'")				+ ", procodigobarra = "	+ (entity.getProcodigobarra() == null ? "NULL" : "'"+ entity.getProcodigobarra() + "'")				+ ", proestado = "	+ (entity.getProestado() == null ? "NULL" : "'"+ entity.getProestado() + "'")				+ ", proobservacion = "	+ (entity.getProobservacion() == null ? "NULL" : "'"+ entity.getProobservacion() + "'")				+ ", protipoproducto = " + (entity.getprotipoproducto() == null ? "NULL" : "'" + entity.getprotipoproducto() + "'")				+ ", prolargo = " + (entity.getProlargo() == null ? "NULL" : "'" + entity.getProlargo() + "'")				+ ", proalto = " + (entity.getProalto() == null ? "NULL" : "'" + entity.getProalto() + "'")				+ ", proancho = " + (entity.getProancho() == null ? "NULL" : "'" + entity.getProancho() + "'")				+ ", procatoster = " + (entity.getProcatoster() == null || (entity.getProcatoster() != null && entity.getProcatoster().equals("") ) ? "NULL" : "'" + entity.getProcatoster() + "'")				+ ", proump = " + (entity.getProump() == null || (entity.getProump() != null && entity.getProump().equals("") ) ? "NULL" : "'" + entity.getProump() + "'")				+ " where procodsx = " 	+ entity.getprocodsx();		int resp = db.executeUpdate(cad);		return resp == 0 ? false : true;	}	public boolean updateproducto(productoForm entity) throws SQLException {		float kiloVolumen = java.lang.Float.parseFloat(entity.getprovolumen()) * 400;		float kvUEmp = java.lang.Float.parseFloat(entity.getprouniempaque()) * kiloVolumen;		float volUniEmp = java.lang.Float.parseFloat(entity.getprovolumen())				* java.lang.Float.parseFloat(entity.getprouniempaque());		float kvmasterpack = 400 * Float.parseFloat( entity.getProvolmasterpac() );		float pesobmp = java.lang.Float.parseFloat(entity.getprounimasterpac())				* java.lang.Float.parseFloat(entity.getprokiloreal());		entity.setprokilovolumen(String.valueOf(kiloVolumen));		entity.setprokvuniempaque(String.valueOf(kvUEmp));		entity.setprovoluniempaque(String.valueOf(volUniEmp));		entity.setprokvmasterpack(String.valueOf(kvmasterpack));	//	entity.setpropesobmp(String.valueOf(pesobmp));				System.out.println("procastoster " + entity.getProcatoster());				String cad = " update producto set  "				+ " procodigocia = "				+ (entity.getprocodigocia() == null ? "NULL" : "'"						+ entity.getprocodigocia() + "'")				+ ", prodescripcion = "				+ (entity.getprodescripcion() == null ? "NULL" : "'"						+ entity.getprodescripcion() + "'")				+ ", procategoria = "				+ (entity.getprocategoria() == null ? "NULL" : "'"						+ entity.getprocategoria() + "'")				+ ", promodelo = "				+ (entity.getpromodelo() == null ? "NULL" : "'"						+ entity.getpromodelo() + "'")				+ ", prosubpartida = "				+ (entity.getprosubpartida() == null ? "NULL" : "'"						+ entity.getprosubpartida() + "'")				+ ", proean = "				+ (entity.getproean() == null ? "NULL" : "'"						+ entity.getproean() + "'")				+ ", procodbarra = "				+ (entity.getprocodbarra() == null ? "NULL" : "'"						+ entity.getprocodbarra() + "'")				+ ", progarantia = "				+ (entity.getprogarantia() == null ? "NULL" : "'"						+ entity.getprogarantia() + "'")				+ ", prokiloreal = "				+ (entity.getprokiloreal() == null ? "NULL" : "'"						+ entity.getprokiloreal() + "'")				+ ", provolumen = "				+ (entity.getprovolumen() == null ? "NULL" : "'"						+ entity.getprovolumen() + "'")				+ ", prokilovolumen = "				+ (entity.getprokilovolumen() == null ? "NULL" : "'"						+ entity.getprokilovolumen() + "'")				+ ", prouniempaque = "				+ (entity.getprouniempaque() == null ? "NULL" : "'"						+ entity.getprouniempaque() + "'")				+ ", prokvuniempaque = "				+ (entity.getprokvuniempaque() == null ? "NULL" : "'"						+ entity.getprokvuniempaque() + "'")				+ ", provoluniempaque = "				+ (entity.getprovoluniempaque() == null ? "NULL" : "'"						+ entity.getprovoluniempaque() + "'")				+ ", prounimasterpac = "				+ (entity.getprounimasterpac() == null ? "NULL" : "'"						+ entity.getprounimasterpac() + "'")				+ ", prokvmasterpack = "				+ (entity.getprokvmasterpack() == null ? "NULL" : "'"						+ entity.getprokvmasterpack() + "'")				+ ", propesobmp = "	+ (entity.getpropesobmp() == null ? "NULL" : "'"+ entity.getpropesobmp() + "'") 				+ ", provolmasterpac = "	+ (entity.getProvolmasterpac() == null ? "NULL" : "'"+ entity.getProvolmasterpac() + "'")						+ ", procodigobarra = "	+ (entity.getProcodigobarra() == null ? "NULL" : "'"+ entity.getProcodigobarra() + "'")				+ ", proestado = "	+ (entity.getProestado() == null ? "NULL" : "'"+ entity.getProestado() + "'")				+ ", proobservacion = "	+ (entity.getProobservacion() == null ? "NULL" : "'"+ entity.getProobservacion() + "'")				+ ", protipoproducto = "	+ (entity.getprotipoproducto() == null ? "NULL" : "'"+ entity.getprotipoproducto() + "'")				+ ", prolargo = " + (entity.getProlargo() == null ? "NULL" : "'" + entity.getProlargo() + "'")				+ ", proalto = " + (entity.getProalto() == null ? "NULL" : "'" + entity.getProalto() + "'")				+ ", proancho = " + (entity.getProancho() == null ? "NULL" : "'" + entity.getProancho() + "'")				+ ", procatoster = " + (entity.getProcatoster() == null || (entity.getProcatoster() != null && entity.getProcatoster().equals("") ) ? "NULL" : "'" + entity.getProcatoster() + "'")				+ ", proump = " + (entity.getProump() == null || (entity.getProump() != null && entity.getProump().equals("") ) ? "NULL" : "'" + entity.getProump() + "'")				+ " where procodsx = " 	+ entity.getprocodsx();						int resp = db.executeUpdate(cad);		return resp == 0 ? false : true;	}	public boolean eliminar(String procodsx) throws SQLException {		String elim = " delete from producto where procodsx = '" + procodsx				+ "'";		int r = db.executeUpdate(elim);		return r == 0 ? false : true;	}					/**	 * el saldo esta en el campo propesobmp	 * @param codcia	 * @param tiposaldo	 * @param start	 * @param param	 * @return	 */	public Collection getlistaproductoConSaldo(String codcia, String tiposaldo, String start, String param) {		start = start == null ? "0" : start;		param = param == null ? "" : param.toUpperCase();		String consulta = "select procodsx, promodelo, prodescripcion, "+ 				" sum(" + (tiposaldo.equals("NAC") ? "entsaldonac" : "entsaldosinnac"   )+ ") , proump, round(coalesce(prounimasterpac,0)) as umpxestiba,'' " +				" from producto, entrada"+				" where entcodproducto = procodsx and"+				" procodigocia = "+ codcia + 				" and (prodescripcion like '%"   + param    +  "%' or promodelo like '%"   + param    +  "%')"+				" group by "+				" procodsx, procodigocia, prodescripcion, procategoria, promodelo, prosubpartida, proean, procodbarra, progarantia,"+				" prokiloreal, provolumen, prokilovolumen, prouniempaque, prokvuniempaque, prouniempaque, prounimasterpac,"+				" prokvmasterpack,proump  "+				" HAVING  sum(" + (tiposaldo.equals("NAC") ? "entsaldonac" : "entsaldosinnac"   )+ ") >0 " +		" limit " + this.maxfilas + " offset  " + (Integer.parseInt(start) * this.maxfilas);		this.classEntidad = Listado.class;		Collection lista = getLista(consulta);  		this.classEntidad = producto.class;		return lista;	}	public int getTotalPaginaslistaproductoConSaldo(String codcia, String tiposaldo, String param) { 		param = param == null ? "" : param.toUpperCase();		String consulta = "select count( distinct entcodproducto)  from producto, entrada "+ 		" where entcodproducto = procodsx and"+		" procodigocia = "+ codcia + 		" and (prodescripcion like '%"   + param    +  "%' or promodelo like '%"   + param    +  "%') " +		" and  " + (tiposaldo.equals("NAC") ? "entsaldonac" : "entsaldosinnac"   )+ " >0 " ;				return getPaginas(consulta);	}		public Collection getlistaproductoConSaldoManual(String ingreso, String tiposaldo, String start, String param) {		start = start == null ? "0" : start;		param = param == null ? "" : param.toUpperCase();		String consulta = "select procodsx, promodelo, prodescripcion, bodnombre || ':' || entposicion, "+ 				" sum(" + (tiposaldo.equals("NAC") ? "entsaldonac" : "entsaldosinnac"   )+ ") ,  " +				" sum(" + (tiposaldo.equals("NAC") ? "entsaldonac*prouniempaque" : "entsaldosinnac*prouniempaque"   )+ ") , entcodsx " +				" from producto, entrada, bodega"+				" where entcodproducto = procodsx and"+				" entcodingreso = "+ ingreso + 				" and entbodega = bodcodsx " +				" and (prodescripcion like '%" + param + "%' or promodelo like '%" + param + "%' or entposicion like '%" + param + "%' or bodnombre like '%" + param + "%')"+				" group by "+				" procodsx, procodigocia, prodescripcion, entposicion, procategoria, promodelo, entcodsx, bodnombre  "+				" HAVING  sum(" + (tiposaldo.equals("NAC") ? "entsaldonac" : "entsaldosinnac"   )+ ") >0 " +		" limit " + this.maxfilas + " offset  " + (Integer.parseInt(start) * this.maxfilas);		this.classEntidad = Listado.class;		Collection lista = getLista(consulta);  		this.classEntidad = producto.class;		return lista;	}	public int getTotalPaginaslistaproductoConSaldoManual(String ingreso, String tiposaldo, String param) { 		param = param == null ? "" : param.toUpperCase();		String consulta = "select count( distinct entcodsx)  from producto, entrada, bodega "+ 		" where entcodproducto = procodsx and"+		" entcodingreso = "+ ingreso + 		" and entbodega = bodcodsx " +		" and (prodescripcion like '%" + param + "%' or promodelo like '%" + param + "%' or entposicion like '%" + param + "%' or bodnombre like '%" + param + "%')"+		" and  " + (tiposaldo.equals("NAC") ? "entsaldonac" : "entsaldosinnac"   )+ " >0 " ;				return getPaginas(consulta);	}	public Collection getlistaRangoProducto(String cia, String promodelo_ini, String promodelo_fin) {		return getLista("select * from producto where procodigocia=" + cia + "  and promodelo >='" +promodelo_ini + "' and promodelo <= '" + promodelo_fin + "'");	}	public Collection getListadoProductosPacking(String packcodsx, String start, String param) {		this.classEntidad = Listado.class;		String cad ="select procodsx, promodelo, prodescripcion, sum(packpcantidad), sum(packpsaldo), '' ,'' from producto, packing_detalle, packing_detalle_posicion "+ 					" where procodsx = packdproducto and packppackingdet = packdcodsx "+ 					" and packdpacking = "+ packcodsx + " and " + getTextoBusquedaResumen( "producto", param  ) +					" group by procodsx, promodelo, prodescripcion"+					" limit " + this.maxfilas + " offset  " + (Integer.parseInt(start) * this.maxfilas);		Collection lista = getLista(cad);		this.classEntidad = producto.class;		return lista;	}		public int getTotalListadoProductosPacking(String packcodsx,  String param) {		param = param == null ? "" : param;		String consulta = "select count( distinct procodsx ) from producto, packing_detalle, packing_detalle_posicion "+ 			" where procodsx = packdproducto and packppackingdet = packdcodsx " + 			" and packdpacking =" + packcodsx + " and producto.resumen like '%" + param +"%' ";		return getPaginas(consulta);	}		/**	 * kardex  de saldo de producto en una fecha	 * @param packcodsx	 * @param param	 * @return	 */	public String getSaldoProductoNNAC(String procodsx,  String fecha,String field) {		String consulta = "select " +				" (CASE WHEN  "+field+" IS NULL THEN 0 ELSE "+field+" END)"+				" from fc_get_kardsaldonac("+procodsx+", '"+fecha+"');";		return getCampo(consulta);	}		/**	 * kardex  de saldo de producto en una fecha	 * @param packcodsx	 * @param param	 * @return	 */	public String getSaldoProductoNAC(String procodsx,  String fecha,String field) {		String consulta = "select " +				" (CASE WHEN  "+field+" IS NULL THEN 0 ELSE "+field+" END)" +				" from fc_get_kardsaldonac("+procodsx+", '"+fecha+"');";		return getCampo(consulta);	}		/**	 * me indica de indica el ultimo ingreso en kardex un producto	 * @param packcodsx	 * @param param	 * @return	 */	public String getMaxingresoTrafico(String procodsx) {		String consulta = "select MAX(kardcodigoingreso) from kardex where kardcodproducto="+procodsx+" and kardtipoing= 'TRAFICO'";		return getCampo(consulta);	}		/**	 * retorna el cif de una referencia basado en un producto y un ingreso	 * @param procodsx	 * @param maxingreso	 * @return	 */	public String getCIFReferenciaProducto(String procodsx, String maxingreso){		String consulta = "select reftcifunit from ingreso,factura_trafico,referencia_trafico where ingtrafico=ftrafnumtrafico and " +				"ingcodsx="+maxingreso+" and reftnumfacturatrafico=ftrafcodsx and reftproducto="+procodsx;		return getCampo(consulta);	}		public Collection getInvUniDetExcel(String cia,String cat,String fecha) {		String consulta = " select public.producto.promodelo," +                          " public.producto.prodescripcion," +                          " (SELECT (CASE WHEN  kardsaldonac IS NULL THEN 0 ELSE kardsaldonac END)-(CASE WHEN  avesaldo_pleg_nac IS NULL THEN 0 ELSE avesaldo_pleg_nac END)-(CASE WHEN  avecant_prod_nac IS NULL THEN 0 ELSE avecant_prod_nac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS saldo_ant_nac," +                          " (SELECT (CASE WHEN  kardsaldonnac IS NULL THEN 0 ELSE kardsaldonnac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS saldo_ant_nnac," +                          " (SELECT (CASE WHEN  avesaldo_pleg_nac IS NULL THEN 0 ELSE avesaldo_pleg_nac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS avesaldo_pleg_nac," +                          " (SELECT (CASE WHEN  avecant_prod_nac IS NULL THEN 0 ELSE avecant_prod_nac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS avecant_prod_nac," +                          " (SELECT ((CASE WHEN  kardsaldonac IS NULL THEN 0 ELSE kardsaldonac END)-(CASE WHEN  avesaldo_pleg_nac IS NULL THEN 0 ELSE avesaldo_pleg_nac END)-(CASE WHEN  avecant_prod_nac IS NULL THEN 0 ELSE avecant_prod_nac END)) + (CASE WHEN  kardsaldonnac IS NULL THEN 0 ELSE kardsaldonnac END) + (CASE WHEN  avesaldo_pleg_nac IS NULL THEN 0 ELSE avesaldo_pleg_nac END)+ (CASE WHEN  avecant_prod_nac IS NULL THEN 0 ELSE avecant_prod_nac END)" +                           " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS total," +                          " (SELECT (CASE WHEN  entsaldonacf IS NULL THEN 0 ELSE entsaldonacf END) - (CASE WHEN  entsaldonac IS NULL THEN 0 ELSE entsaldonac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS saldo_reservado " +                          " from public.producto, public.categoria, public.compania " +                          " where comcodsx = " + cia +                          " and catcodsx =  " + cat +                          " and procodigocia = comcodsx" +                          " and  procategoria=catcodsx" +                          " order by 1;";		return getListaDeListas(consulta);	} 		public Collection getInvUniDetExcel_Ent(String cia,String cat) {		String consulta = "SELECT producto.procodsx, producto.promodelo, producto.prodescripcion, categoria_oster.catodescripcion, producto.procodigobarra, " +                          "sum(entrada.entsaldonacf) AS saldonac,  " +				          "sum(entrada.entsaldosinnac) AS saldosinnac, " +				          "sum(entrada.entsaldonacf)-sum(entrada.entsaldonac) AS reservado, " +				          "sum(entrada.entsaldonacf) + sum(entrada.entsaldosinnac) AS total " +				          "FROM entrada " +				          "inner join producto on producto.procodsx = entrada.entcodproducto " +				          "inner join compania on compania.comcodsx = producto.procodigocia and compania.comcodsx = " + cia + " " +				          "inner join ingreso on  ingreso.ingcodsx = entrada.entcodingreso AND ingreso.ingestado::text = 'FINALIZADO'::text " +				          "inner join categoria on catcodsx = procategoria and catcodsx =  " + cat + " " +				          "left join categoria_oster on categoria_oster.catocodsx = producto.procatoster " +				          "GROUP BY producto.procodsx,producto.promodelo,producto.procodigobarra,compania.comcodsx, producto.procodsx, producto.prodescripcion, catodescripcion " +				          "ORDER BY producto.promodelo;";		return getListaDeListas(consulta);	} 		public Collection getInvUniDetExcel_Ave(String prod) {		String consulta = "select sum(avesaldo_pleg_nac) as plegnac,sum(avesaldo_prod_nac ) as prodnac,sum(avesaldo_pleg_nnac ) as plegnnac,sum(avesaldo_prod_nnac)  as prodnnac " +                          "from averia where aveproducto = " + prod + " limit 1";		return getListaDeListas(consulta);	} 		public Collection getInvUniValExcel(String cia,String cat,String fecha) {		String consulta = " select public.producto.procodsx, public.producto.promodelo," +                          " public.producto.prodescripcion," +                          " (SELECT (CASE WHEN kardsaldonac <0 or kardsaldonac IS NULL THEN 0 ELSE kardsaldonac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS saldo_ant_nac," +                          " (SELECT (CASE WHEN kardsaldonnac <0 or kardsaldonnac IS NULL THEN 0 ELSE kardsaldonnac END) " +                          " from fc_get_kardsaldonac(public.producto.procodsx,'"+fecha+"')) AS saldo_ant_nnac" +                          " from public.producto, public.categoria, public.compania " +                          " where comcodsx = " + cia +                          " and catcodsx =  " + cat +                          " and procodigocia = comcodsx" +                          " and  procategoria=catcodsx" +                          " order by 2;";		return getListaDeListas(consulta);	}	}