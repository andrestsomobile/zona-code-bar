package maestro.action;import java.io.IOException;import javax.servlet.ServletException;import java.sql.SQLException; import org.apache.struts.action.ActionMessage;  import org.apache.struts.action.ActionMessages; import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.util.*;import maestro.control.*;import maestro.entity.*;import maestro.form.*;import org.apache.struts.action.*;  public final class clienteAction  extends Action{
			 public ActionForward execute(ActionMapping mapping,	ActionForm form, 			HttpServletRequest request,	HttpServletResponse response)			throws IOException, ServletException {
clienteForm _form = (clienteForm)form;  gstcliente control = new gstcliente(); String opcion = request.getParameter("opcion");  opcion = opcion==null || ( opcion!=null && opcion.equals("")) ? "crear" : opcion; 
//OPCION DE set:  if(opcion.equals("set")) {  cliente entity = control.getcliente(request.getParameter("codsx")); clienteForm  temp  = new clienteForm();  temp.setopcion("update"); temp.llenar(entity);  request.setAttribute("clienteForm", temp);  return mapping.findForward("cliente_datos");  }  String mensaje = "";  //opcion de CREAR  if(opcion.equals("crear")) {  String clinombre = _form.getclinombre();   String clinit = _form.getclinit();   String clidireccion = _form.getclidireccion();   String clitelefono = _form.getclitelefono();   String cliciudad = _form.getcliciudad();   String clicontacto = _form.getclicontacto();   String climail = _form.getclimail();   String cliobservacion = _form.getcliobservacion();   String clicodcompania = _form.getclicodcompania();   String clicodigo = _form.getClicodigo(); String clidevolucion = _form.getClidevolucion();
  try {  control.crearcliente(clinombre,clinit,clidireccion,clitelefono,cliciudad,clicontacto,climail,cliobservacion,clicodcompania, clicodigo, clidevolucion );  mensaje = "cliente Creado con Exito";    } catch (SQLException e) {   e.printStackTrace();  mensaje = "No se pudo Crear el cliente: <br> " + e.getLocalizedMessage();   }  }  // Opcion de update  if(opcion.equals("update")) {   try {   control.updatecliente(_form);   mensaje = "cliente Actualizado con Exito";    } catch (SQLException e) { e.printStackTrace();   mensaje = "No se pudo Actualizar el cliente: <br> " + e.getLocalizedMessage();  }  }  // Opcion de eliminar  if(opcion.equals("delete")) { String codsx = request.getParameter("codsx");  try {   control.eliminar(codsx);   mensaje = "cliente Eliminado con Exito";    } catch (SQLException e) { e.printStackTrace();   mensaje = "No se pudo Eliminar el cliente: <br> " + e.getLocalizedMessage();  }  }  ActionMessages e = getErrors(request);  e.add("general", new ActionMessage(mensaje, false)); addErrors(request, e);  return mapping.findForward("cliente");    } }