package maestro.action;import java.io.IOException;import java.sql.SQLException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import maestro.control.gstproducto;import maestro.entity.producto;import maestro.form.productoForm;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;public final class productoAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		productoForm _form = (productoForm) form;		gstproducto control = new gstproducto();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String destino = "producto_datos";		// OPCION DE set:		if (opcion.equals("set")) {			producto entity = control.getproducto(request.getParameter("codsx"));			productoForm temp = new productoForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("productoForm", temp);			return mapping.findForward("producto_datos");		}		String mensaje = "";		// opcion de CREAR		if (opcion.equals("crear")) {			String procodigocia = _form.getprocodigocia();			String prodescripcion = _form.getprodescripcion();			String procategoria = _form.getprocategoria();			String promodelo = _form.getpromodelo();			String prosubpartida = _form.getprosubpartida();			String proean = _form.getproean();			String procodbarra = _form.getprocodbarra();			String progarantia = _form.getprogarantia();			String prokiloreal = _form.getprokiloreal();			String provolumen = _form.getprovolumen();			String prokilovolumen = _form.getprokilovolumen();			String prouniempaque = _form.getprouniempaque();			String prokvuniempaque = _form.getprokvuniempaque();			String provoluniempaque = _form.getprovoluniempaque();			String prounimasterpac = _form.getprounimasterpac();			String prokvmasterpack = _form.getprokvmasterpack();			String propesobmp = _form.getpropesobmp();			String provolmasterpac = _form.getProvolmasterpac();			String proestado = _form.getProestado();			String proobservacion = _form.getProobservacion();			String protipoproducto = _form.getprotipoproducto();			String prolargo = _form.getProlargo();			String proalto  = _form.getProalto();			String proancho = _form.getProancho();			String procatoster = _form.getProcatoster();			String proump = _form.getProump();			try {				control.crearproducto(procodigocia, prodescripcion, procategoria, promodelo, prosubpartida, proean, procodbarra, progarantia, prokiloreal, provolumen, prokilovolumen, prouniempaque, prokvuniempaque, provoluniempaque, prounimasterpac, prokvmasterpack, propesobmp, provolmasterpac,						_form.getProcodigobarra(), proestado, proobservacion, protipoproducto, prolargo, proalto, proancho, procatoster, proump);				mensaje = "producto Creado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el producto: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				control.updateproducto(_form);				mensaje = "producto Actualizado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el producto: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			String codsx = request.getParameter("codsx");			try {				control.eliminar(codsx);				mensaje = "producto Eliminado con Exito";				destino = "producto";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el producto: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}