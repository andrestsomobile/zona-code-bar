package averias.action;import ingreso.control.gstentrada;import ingreso.entity.entrada;import java.io.IOException;import javax.servlet.ServletException;import java.sql.SQLException;import java.util.Collection;import java.util.Iterator;import maestro.control.gstcliente;import maestro.control.gstdepartamento;import maestro.control.gstproducto;import maestro.control.gstsucursal;import maestro.entity.departamento;import maestro.entity.producto;import maestro.entity.sucursal;import nacionalizacion.control.gstnacionalizacion_detalle;import nacionalizacion.entity.nacionalizacion_detalle;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import averias.control.*;import averias.entity.*;import averias.form.*;import org.apache.struts.action.*;import pedido.control.gstpedido;import pedido.control.gstreferencia_pedido;import pedido.entity.pedido;import pedido.form.pedidoForm;import util.Math;import util.config;import util.gstconfig;import db.beanConnector;public final class reparacionAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		reparacionForm _form = (reparacionForm) form;		gstreparacion control = new gstreparacion();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String mensaje = "";		String destino = "";		// OPCION DE crear_pedido:		/*		 * a traves de esta opcion, el usuario da click en la pantalla de la reparacion y crea un pedido, el sistema genera el pedido automaticamente		 */		if (opcion.equals("crear_pedido")) {			beanConnector db = new beanConnector(false);			gstpedido gped = new gstpedido(db);			gstreferencia_pedido grefp = new gstreferencia_pedido(db);			gstreparacion grep = new gstreparacion(db);			gstsucursal gsuc = new gstsucursal(db);			gstdepartamento gdep = new gstdepartamento(db);			gstreparacion_detalle grepd = new gstreparacion_detalle(db);			gstaveria gave = new gstaveria(db);			gstproducto gprod = new gstproducto(db);			gstentrada gent = new gstentrada(db);			gstreparacion_nacdet grepnacdet = new gstreparacion_nacdet(db);			gstnacionalizacion_detalle gnacdet = new gstnacionalizacion_detalle(db);			boolean resp = true;			// la reparacion			reparacion rep = grep.getreparacion(request.getParameter("repcodsx"));			// saco el codigo del cliente para esto:			String clicodsx = request.getParameter("clicodsx");			String succodsx = request.getParameter("succodsx");			sucursal suc = gsuc.getsucursal(succodsx);			departamento dep = gdep.getdepartamento(suc.getsucdepartamento());			String numpedido = request.getParameter("numpedido");			if (numpedido.equals(""))				numpedido = "SIN NUM-PED";			try {				resp &= gped.crearpedido(rep.getrepcodcia(), numpedido, "SIN 0.C", "SIN GUIA", util.Fecha.getFecha(), util.Fecha.getFecha(), util.Fecha.getFecha(), null, "00:00", clicodsx, suc.getsuccodsx(), suc.getsucdireccion(), suc.getsucciudad(), suc.getsucdepartamento(),						"KA generado automaticamente", "SIN FACTURA", "TRAMITE", "0", "0", "0", "0", "NAC", null, util.Fecha.getHora(), dep.getdepzona(), "15", "16",null,null,null,null);				pedido ped = gped.getpedido(rep.getrepcodcia(), numpedido);				rep.setReppedido(ped.getpedcodsx());				grep.updatereparacion(rep);				String[] repdcodsx = request.getParameterValues("repdcodsx");				String[] valor = request.getParameterValues("valor");				for (int i = 0; i < repdcodsx.length; i++) {					reparacion_detalle repd = grepd.getreparacion_detalle(repdcodsx[i]);					if (repd == null)						continue;					averia ave = gave.getaveria(repd.getrepdaveria());					entrada ent = gent.getentrada(ave.getaveentrada());					entrada ent_rep = gent.getentrada(ent.getentcodingreso(), ent.getentcodproducto(), repd.getRepdbodega_dest(), repd.getRepdposicion_dest());					// para sacar las nacdetalles, miro esta reparacion_detalle que registros tiene					// en reparacion_nacdet					Collection rep_nacdets = grepnacdet.getlistareparacion_nacdet(repd.getrepdcodsx());					// miro si tiene o no nacionalizacines para respaldar.					if (!rep_nacdets.isEmpty()) {						// SE TOMA SALDO DE ENTRADA Y NACDETALLE						Iterator ite_nacdets = rep_nacdets.iterator();						while (ite_nacdets.hasNext()) {							reparacion_nacdet repnd = (reparacion_nacdet) ite_nacdets.next();							nacionalizacion_detalle nacd = gnacdet.getnacionalizacion_detalle(repnd.getRepndnacdet_rep());							// creo la referencia_pedido restando de esta nac							// SE TOMA SALDO SOLO DE ENTRADA							String cant = repnd.getrepndcant();							String tot = util.Math.multiplicar(valor[i], cant);							resp &= grefp.crearreferencia_pedido(ped.getpedcodsx(), repd.getrepdproducto(), repd.getRepdbodega_dest(), repd.getRepdposicion_dest(), cant, valor[i], tot, ent_rep.getentcodsx(), nacd.getnadcodsx(), cant, ent.getentpesoneto(), ent.getentpesobruto()									, util.Math.multiplicar(ent.getentpesoneto(), cant), util.Math.multiplicar(ent.getentpesobruto(), cant), "0", "0");														// resto a la nacdetalle:							nacd.setNadsaldo(Math.restar_bigdecimal(nacd.getNadsaldo(), cant).toPlainString());							gnacdet.updatenacionalizacion_detalle(nacd);							// resto a la entrada la cantidad							ent_rep.setentsaldonac(Math.restar_bigdecimal(ent_rep.getentsaldonac(), cant).toPlainString());							gent.updateentrada(ent_rep);						}					} else {						// SE TOMA SALDO SOLO DE ENTRADA						String cant = util.Math.sumar(repd.getrepdcant_pleg(), repd.getrepdcant_prod());						String tot = util.Math.multiplicar(valor[i], cant);						resp &= grefp.crearreferencia_pedido(ped.getpedcodsx(), repd.getrepdproducto(), repd.getRepdbodega_dest(), repd.getRepdposicion_dest(), cant, valor[i], tot, ent_rep.getentcodsx(), null, cant, ent.getentpesoneto(), ent.getentpesobruto(), util.Math.multiplicar(ent								.getentpesoneto(), cant), util.Math.multiplicar(ent.getentpesobruto(), cant),"0","0");						// resto a la entrada la cantidad						ent_rep.setentsaldonac(Math.restar_bigdecimal(ent_rep.getentsaldonac(), cant).toPlainString());						gent.updateentrada(ent_rep);					}				}				// luego de crear las referencias, lo mando para el pedido, debo crear y fijar el pedidoForm				pedidoForm pedf = new pedidoForm();				pedf.llenar(ped);				pedf.setopcion("update");				request.setAttribute("pedidoForm", pedf);			} catch (SQLException ex) {				ex.printStackTrace();				resp = false;				mensaje = ex.getMessage();			}			if (resp) {				db.commit();				destino = "pedido_datos";			} else {				db.rollback();				destino = "reparacion_datos";				reparacionForm temp = new reparacionForm();				temp.setopcion("update");				temp.llenar(rep);				request.setAttribute("reparacionForm", temp);			}		}		// OPCION DE set:		if (opcion.equals("activar")) {			// LA VALIDACION SE HACE EN EL TRIGGER			reparacion entity = control.getreparacion(request.getParameter("repcodsx"));			if (entity.getReppedido() != null && !entity.getReppedido().equals("")) {				// tiene pedido y no lo dejo:				mensaje = "LA REPARACION TIENE ASOCIADO EL PEDIDO CON CONSECUTIVO " + entity.getReppedido() + ", no puede activarla a menos que elimine el pedido";			} else {				entity.setrepestado("TRAMITE");				try {					control.updatereparacion(entity);					mensaje = "Reparacion Activada con Exito";				} catch (SQLException e1) {					entity.setrepestado("FINALIZADO");					mensaje = "NO SE PUDO ACTIVAR LA REPARACION:" + e1.getMessage();				}			}			reparacionForm temp = new reparacionForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("reparacionForm", temp);			destino = "reparacion_datos";		}		// OPCION DE set:		if (opcion.equals("set")) {			reparacion entity = control.getreparacion(request.getParameter("repcodsx"));			reparacionForm temp = new reparacionForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("reparacionForm", temp);			destino = "reparacion_datos";		}		// opcion de CREAR		if (opcion.equals("crear")) {			String repcodcia = _form.getrepcodcia();			String repfecha = _form.getrepfecha();			String repsaldo = _form.getrepsaldo();			String repdestino = _form.getrepdestino();			String repestado = _form.getrepestado();			String repobservacion = _form.getRepobservacion();			destino = "reparacion_datos";			try {				control.crearreparacion(repcodcia, repfecha, repsaldo, repdestino, repestado, repobservacion, null);				mensaje = "reparacion Creado con Exito";				reparacion entity = control.getreparacion(repcodcia, repfecha);				reparacionForm temp = new reparacionForm();				temp.setopcion("update");				temp.llenar(entity);				request.setAttribute("reparacionForm", temp);			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el reparacion: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				destino = "reparacion_datos";				control.updatereparacion(_form);				mensaje = "reparacion Actualizado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el reparacion: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			destino = "reparacion";			String codsx = request.getParameter("codsx");			try {				control.eliminar(codsx);				mensaje = "reparacion Eliminado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el reparacion: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}}