package averias.action;import ingreso.control.gstentrada;import ingreso.entity.entrada;import java.io.IOException;import java.math.BigDecimal;import java.sql.SQLException;import java.util.Collection;import java.util.Iterator;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import nacionalizacion.control.gstnacionalizacion_detalle;import nacionalizacion.entity.nacionalizacion_detalle;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import util.Fecha;import util.Math;import averias.control.gstaveria;import averias.control.gstaveria_nacdet;import averias.control.gstaveria_padre;import averias.entity.averia;import averias.entity.averia_padre;import averias.form.averia_padreForm;import db.beanConnector;public final class averia_padreAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		averia_padreForm _form = (averia_padreForm) form;		gstaveria_padre control = new gstaveria_padre();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String mensaje = "";		String destino = "";		if (opcion.equals("activar")) {			averia_padre entity = control.getaveria_padre(request.getParameter("codsx"));			// UNA AVERIA_PADRE SE PUEDE ACTIVAR SI NINGUNA DE SUS AVERIAS DETALLE TIENE REPARACIONES:			if ( control.tieneDetallesConReparaciones(entity.getavpcodsx()) ) {				mensaje = "No puede activar si alguna de las Averias Detalle tiene Reparaciones";			} else {				try {					entity.setavpestado("TRAMITE");					control.updateaveria_padre(entity);					control.cambiarEstadoDetalles(entity.getavpcodsx(), "TRAMITE");					mensaje = "Averia Activada con exito";				} catch (SQLException e1) {					mensaje = "No se pudo activar la averia : " + e1.getMessage();					e1.printStackTrace();				}			}			averia_padreForm temp = new averia_padreForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("averia_padreForm", temp);			destino = "averia_padre_datos";		}		if (opcion.equals("creardetalle")) {			String resp_crear = null;			averia_padre entity = control.getaveria_padre(request.getParameter("codsx"));			String[] entcodsx = request.getParameterValues("entcodsx");			String[] cantplegnac = request.getParameterValues("cantplegnac");			String[] cantprodnac = request.getParameterValues("cantprodnac");			try {				for (int i = 0; i < entcodsx.length; i++) {					cantplegnac[i] = cantplegnac[i] != null && !cantplegnac[i].equals("") ? cantplegnac[i]:"0";					cantprodnac[i] = cantprodnac[i] != null && !cantprodnac[i].equals("") ? cantprodnac[i]:"0";					if (!cantplegnac[i].equals("0") || !cantprodnac[i].equals("0")) {						resp_crear = crear_averia(entity.getavpcodsx(),entity.getavpcompania(), entity.getavpingreso(), entcodsx[i], cantplegnac[i], cantprodnac[i]);					}				}                if (resp_crear == null) {                	mensaje = "Detalles de Averia creadas con exito";                } else {                	mensaje = "No se pudo crear todos los Detalles de Averia";                }			} catch (Exception e1) {				mensaje = "No se pudo crear los Detalles de Averia : " + e1.getMessage();				e1.printStackTrace();			}			averia_padreForm temp = new averia_padreForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("averia_padreForm", temp);			destino = "averia_padre_datos";		}		// OPCION DE set:		if (opcion.equals("set")) {			averia_padre entity = control.getaveria_padre(request.getParameter("codsx"));			averia_padreForm temp = new averia_padreForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("averia_padreForm", temp);			destino = "averia_padre_datos";		}		// opcion de CREAR		if (opcion.equals("crear")) {			String avpcompania = _form.getavpcompania();			String avpfecha = Fecha.getFecha();			String avpingreso = _form.getavpingreso();			String avpestado = "TRAMITE";			destino = "averia_padre_datos";			boolean resp = true;			try {				int avpcodsx = control.crearaveria_padre(avpcompania, avpfecha, avpingreso, avpestado);				if (avpcodsx > 0) {					mensaje = "Averia Creada con Exito";					averia_padre entity = control.getaveria_padre(avpcodsx + "");					averia_padreForm temp = new averia_padreForm();					temp.setopcion("update");					temp.llenar(entity);					request.setAttribute("averia_padreForm", temp);				} else {					mensaje = "No se pudo Crear la Averia: <br> Revise los datos <br>";					resp = false;				}				destino = "averia_padre_datos";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el averia: <br> Revise que el saldo de la Entrada sea suficiente <br>" + e.getLocalizedMessage();				resp = false;				destino = "averia_padre_datos";			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				destino = "averia_padre";				// Miro si esta finalizando para finalizar tambien las averias detalle				averia_padre entity = control.getaveria_padre(_form.getavpcodsx());				if ( _form.getavpestado().equalsIgnoreCase("FINALIZADO") && entity.getavpestado().equalsIgnoreCase("TRAMITE") ) {					control.cambiarEstadoDetalles(_form.getavpcodsx(), "FINALIZADO");				}				control.updateaveria_padre(_form);				mensaje = "Averia actualizada con exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar la Averia: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			destino = "averia_padre";			String codsx = request.getParameter("codsx");			boolean resp = true;			try {				if (!control.tieneDetalles(codsx)) {					resp &= control.eliminar(codsx);					mensaje = "Averia Eliminada con Exito";				} else {					mensaje = "No se pudo Eliminar Averia porque tiene detalles asociados";				}			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el averia: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}	private String crear_averia(String avecodaveriapadre, String avecompania, String aveingreso, String aveentrada, String avecant_pleg_nac, String avecant_prod_nac) {		String _mensaje = null;		String avefecha = Fecha.getFecha();		String avetipo = "";		String aveboddest = "6"; // A2C		String aveposdest = "PISO";		String aveestado = "TRAMITE";		String avecant_pleg_nnac = "0";		String avecant_prod_nnac = "0";		beanConnector db = new beanConnector(false);		boolean resp = true;		gstentrada gent = new gstentrada(db);		gstaveria _control = new gstaveria(db);		entrada ent = gent.getentrada(aveentrada);		gstnacionalizacion_detalle gnacd = new gstnacionalizacion_detalle(db);		gstaveria_nacdet gavenacd = new gstaveria_nacdet(db);		try {			// primero miro que saldo debo restar:			BigDecimal can_pleg_nnac = new BigDecimal(avecant_pleg_nnac);			BigDecimal can_prod_nnac = new BigDecimal(avecant_prod_nnac);			BigDecimal can_pleg_nac = new BigDecimal(avecant_pleg_nac);			BigDecimal can_prod_nac = new BigDecimal(avecant_prod_nac);			BigDecimal todo_nnac = can_pleg_nnac.add(can_prod_nnac);			BigDecimal todo_nac = can_pleg_nac.add(can_prod_nac);			BigDecimal saldo_ent_nnac = new BigDecimal(ent.getentsaldosinnac());			BigDecimal saldo_ent_nac = new BigDecimal(ent.getentsaldonac());			boolean valido = true;			if (todo_nnac.compareTo(saldo_ent_nnac) > 1) {				_mensaje = "No puede definir como averiado mayor cantidad al saldo NNAC";				valido = false;			}			if (todo_nac.compareTo(saldo_ent_nac) > 1) {				_mensaje = "No puede definir como averiado mayor cantidad al saldo NAC";				valido = false;			}			if (valido) {				String averiado_total = Math.sumar(avecant_pleg_nac, avecant_prod_nac, avecant_pleg_nnac, avecant_prod_nnac);				// resto la cantidad para que no aparezca mas veces que las que debe ser:				ent.setentcantidad(Math.restar_bigdecimal(ent.getentcantidad(), averiado_total).toPlainString());				// fijo el saldo por cantidad:				BigDecimal nuevo_saldo_nnac = new BigDecimal(ent.getentsaldosinnac()).subtract(todo_nnac);				ent.setentsaldosinnac(nuevo_saldo_nnac.toPlainString());				BigDecimal nuevo_saldo_nac = new BigDecimal(ent.getentsaldonac()).subtract(todo_nac);				ent.setentsaldonac(nuevo_saldo_nac.toPlainString());				// fijo tambien los saldos FISICOS restando				BigDecimal nuevo_saldo_nnacf = new BigDecimal(ent.getEntsaldosinnacf()).subtract(todo_nnac);				ent.setEntsaldosinnacf(nuevo_saldo_nnacf.toPlainString());				BigDecimal nuevo_saldo_nacf = new BigDecimal(ent.getEntsaldonacf()).subtract(todo_nac);				ent.setEntsaldonacf(nuevo_saldo_nacf.toPlainString());				// fijo el saldo por peso:				// peso neto:				String peso_neto_unit = ent.getentpesoneto();				String peso_neto_averiado = Math.multiplicar(peso_neto_unit, averiado_total);				BigDecimal nuevo_saldo_peson = Math.restar_bigdecimal(ent.getentsaldopesoneto(), peso_neto_averiado);				ent.setentsaldopesoneto(nuevo_saldo_peson.toPlainString());				// peso BRUTO:				String peso_bruto_unit = ent.getentpesobruto();				String peso_bruto_averiado = Math.multiplicar(peso_bruto_unit, averiado_total);				BigDecimal nuevo_saldo_pesob = Math.restar_bigdecimal(ent.getentsaldopesobruto(), peso_bruto_averiado);				ent.setentsaldopesobruto(nuevo_saldo_pesob.toPlainString());				resp &= gent.updateentrada(ent);				resp &= _control.crearaveria(avecompania, avefecha, aveingreso, aveentrada, avetipo, aveboddest, aveposdest, avecant_pleg_nac, avecant_pleg_nnac, avecant_prod_nac, avecant_prod_nnac, avecant_pleg_nac, avecant_pleg_nnac, avecant_prod_nac, avecant_prod_nnac, aveestado,						ent.getentcodproducto(),avecodaveriapadre);				// ahora resto las nac_detalles				if (todo_nac.compareTo(BigDecimal.ZERO) != 0) {					averia ave = _control.getaveria(avecompania, avefecha, aveingreso, aveentrada);					this.averiarNacDetalles(ave.getavecodsx(), aveentrada, todo_nac.toPlainString(), gnacd, gavenacd);				}				// luego de crear la averia, creo la entrada o sumo si ya existe una entrada				/*				 * entrada ent_averia = gent.getentrada(ent.getentcodingreso(), ent.getentcodproducto(), aveboddest, aveposdest); if(ent_averia==null) { //en esa posicion / bodega no hay nada del producto, lo creo pero con SALDOS FISICOS UNICAMENTE //los saldos disponibles no para que no lo tome en				 * pedidos o packings resp &= gent.crearentrada(ent.getentcodingreso(), ent.getentcodproducto(), aveboddest, aveposdest, averiado_total, ent.getentpesoneto(), peso_neto_averiado, ent.getentpesobruto(), peso_bruto_averiado, peso_neto_averiado, peso_bruto_averiado, "0", "0",				 * ent.getEntvalor(), Math.multiplicar(ent.getEntvalor(), averiado_total), todo_nac.toPlainString(), todo_nnac.toPlainString(), ent.getEntunidad());				 * 				 * }else { //si hay algo, sumo los saldos fisicos, pero no los DISPONIBLES ent_averia.setEntsaldonacf( Math.sumar( todo_nac.toPlainString() , ent_averia.getEntsaldonacf()) ); ent_averia.setEntsaldosinnacf( Math.sumar( todo_nnac.toPlainString() , ent_averia.getEntsaldosinnacf()) );				 * ent_averia.setentsaldopesoneto(Math.sumar( peso_neto_averiado , ent_averia.getentsaldopesoneto()) ); ent_averia.setentsaldopesobruto(Math.sumar( peso_bruto_averiado , ent_averia.getentsaldopesobruto()) );				 * 				 * 				 * resp &= gent.updateentrada( ent_averia );				 */			}		} catch (SQLException e) {			e.printStackTrace();			_mensaje = "No se pudo Crear el averia: <br> Revise que el saldo de la Entrada sea suficiente <br>" + e.getLocalizedMessage();			resp = false;		}		if (resp)			db.commit();		else			db.rollback();		db = null;		return _mensaje;	}	/**	 * metodo llamado cuando la entrada que se va a mover, tiene saldo nacionalizado y tiene nacionalizacion_detalle asociadas, en este caso, hay que crear la nueva tabla reubicacion_nacdetalle en la que se registrara las nacdetalles que se restan, y a donde se suman.	 * 	 * @param entcodsx	 * @return	 */	private boolean averiarNacDetalles(String avecodsx, String entor, String cantidad, gstnacionalizacion_detalle gnacdet, gstaveria_nacdet gavnac) throws SQLException {		boolean resp = true;		Collection nacdets = gnacdet.getlistanacionalizacion_detalleByEntrada(entor);		// si no hay nacionalizaciones, no hace anda		if (nacdets.isEmpty())			return true;		Iterator itenacd = nacdets.iterator();		// por cada nacdetalle original que tengo, voy restando la cantidad		BigDecimal faltante = new BigDecimal(cantidad);		while (itenacd.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {			nacionalizacion_detalle nacdetor = (nacionalizacion_detalle) itenacd.next();			BigDecimal nadsaldo = new BigDecimal(nacdetor.getNadsaldo());			if (nadsaldo.compareTo(BigDecimal.ZERO) == 0)				continue;			String cant = "";			if (faltante.compareTo(nadsaldo) >= 0) {				// si el faltante es mayor, cojo todo el saldo de la nacionalizacion				cant = nadsaldo.toPlainString();				nacdetor.setNadsaldo("0");				nacdetor.setnadcantidad("0");				faltante = Math.restar_bigdecimal(faltante.toPlainString(), cant);			} else {				cant = faltante.toPlainString();				nacdetor.setNadsaldo(Math.restar_bigdecimal(nadsaldo.toPlainString(), faltante.toPlainString()).toPlainString());				nacdetor.setnadcantidad(Math.restar_bigdecimal(nacdetor.getnadcantidad(), faltante.toPlainString()).toPlainString());				faltante = BigDecimal.ZERO;			}			try {				// actualizo la nacdetalle a la que estoy restando				resp &= gnacdet.updatenacionalizacion_detalle(nacdetor);				// creo la relacion reuic_nacet para asi identificar en la reubicacion, lo que se movio con saldo				// nac producto de nacionalizaciones se mueva bien				resp &= gavnac.crearaveria_nacdet(avecodsx, nacdetor.getnadcodsx(), cant, cant);			} catch (SQLException ex) {				ex.printStackTrace();				resp = false;				// break;				throw ex;			}		}		return resp;	}}