package averias.action;import java.io.IOException;import java.math.BigDecimal;import java.sql.SQLException;import java.util.Collection;import java.util.Iterator;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.Action;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.action.ActionMessage;import org.apache.struts.action.ActionMessages;import util.Math;import averias.control.gstaveria;import averias.control.gstaveria_nacdet;import averias.control.gstreparacion;import averias.control.gstreparacion_detalle;import averias.control.gstreparacion_nacdet;import averias.entity.averia;import averias.entity.averia_nacdet;import averias.entity.reparacion;import averias.entity.reparacion_detalle;import averias.form.reparacionForm;import averias.form.reparacion_detalleForm;import db.beanConnector;public final class reparacion_detalleAction extends Action {	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		reparacion_detalleForm _form = (reparacion_detalleForm) form;		gstreparacion_detalle control = new gstreparacion_detalle();		String opcion = request.getParameter("opcion");		opcion = opcion == null || (opcion != null && opcion.equals("")) ? "crear" : opcion;		String mensaje = "";		String destino = "";		/**		 * con esta opcion se agrega un total de un producto, mirando el tipo de saldo, y el destino...		 * 		 */		if (opcion.equals("agregar_total")) {			destino = "reparacion_datos";			beanConnector db = new beanConnector(false);			gstreparacion grep = new gstreparacion(db);			gstreparacion_detalle grepd = new gstreparacion_detalle(db);			gstreparacion_nacdet grnacdet = new gstreparacion_nacdet(db);			gstaveria gave = new gstaveria(db);			gstaveria_nacdet gavenacdet = new gstaveria_nacdet(db);			reparacion rep = grep.getreparacion(request.getParameter("repcodsx"));			String producto = request.getParameter("producto");			String cantidad = request.getParameter("cantidad");			String saldo = rep.getrepsaldo();			String desti = rep.getrepdestino();			BigDecimal faltante = new BigDecimal(cantidad);			boolean resp = true;			try {				if (saldo.equals("NAC")) {					// miro si va para pedido o despiece					if (desti.equals("PLEGADIZA")) {						// es para PEDIDO, solo tomara de saldo de plegadiza						Collection lista = gave.getlistaaveriaFifoReparacion(producto, saldo, desti);						Iterator ite = lista.iterator();						// ciclo para respaldar						String canti = "";						while (ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {							averia ave = (averia) ite.next();							BigDecimal saldo_pleg_nac = new BigDecimal(ave.getavesaldo_pleg_nac());							if (faltante.compareTo(saldo_pleg_nac) > 0) {								ave.setavesaldo_pleg_nac("0");								canti = saldo_pleg_nac.toPlainString();							} else {								ave.setavesaldo_pleg_nac(Math.restar_bigdecimal(saldo_pleg_nac.toPlainString(), faltante.toPlainString()).toPlainString());								canti = faltante.toPlainString();							}							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), canti);							System.out.println("Va a tomar " + canti + "  de la averia " + ave.getavecodsx() + " de tipo plegadiza ");							// creo la reparacion_detalle							resp &= grepd.crearreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx(), canti, "0", ave.getaveboddest(), ave.getaveposdest(), saldo, ave.getaveboddest(), ave.getaveposdest());							// la obtengo de una vez							reparacion_detalle repd = grepd.getreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx());							// actualizo el saldo en la NAC haciendo el update							resp &= gave.updateaveria(ave);							// por cada AVERIA miro las ave_nacdet que tiene para hacer un "subrespaldo" y decir que							// la reparacion_detalle toma de una o varias aven_nacdet y la cantidad que toma.							resp &= this.crearReparacion_nacdet(ave.getavecodsx(), gavenacdet, canti, grnacdet, repd);						}					} else {						// es para DESPIECE, toma de saldo producto primero y luego de plegadiza						Collection lista = gave.getlistaaveriaFifoReparacion(producto, saldo, "DESPIECE");						Iterator ite = lista.iterator();						// ciclo para respaldar						String canti = "";						while (ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {							averia ave = (averia) ite.next();							BigDecimal saldo_prod_nac = new BigDecimal(ave.getavesaldo_prod_nac());							if (faltante.compareTo(saldo_prod_nac) > 0) {								ave.setavesaldo_prod_nac("0");								canti = saldo_prod_nac.toPlainString();							} else {								ave.setavesaldo_prod_nac(Math.restar_bigdecimal(saldo_prod_nac.toPlainString(), faltante.toPlainString()).toPlainString());								canti = faltante.toPlainString();							}							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), canti);							System.out.println("Va a tomar " + canti + "  de la averia " + ave.getavecodsx() + " de tipo PRODUCTO ");							resp &= grepd.crearreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx(), "0", canti, ave.getaveboddest(), ave.getaveposdest(), saldo, ave.getaveboddest(), ave.getaveposdest());							// la obtengo de una vez							reparacion_detalle repd = grepd.getreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx());							// actualizo el saldo en la NAC haciendo el update							resp &= gave.updateaveria(ave);							resp &= this.crearReparacion_nacdet(ave.getavecodsx(), gavenacdet, canti, grnacdet, repd);						}						// AHORA VOY A TOMAR DE SALDO DE PLEGADIZA						lista = gave.getlistaaveriaFifoReparacion(producto, saldo, "PLEGADIZA");						ite = lista.iterator();						// ciclo para respaldar						while (ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {							averia ave = (averia) ite.next();							BigDecimal saldo_pleg_nac = new BigDecimal(ave.getavesaldo_pleg_nac());							if (faltante.compareTo(saldo_pleg_nac) > 0) {								ave.setavesaldo_pleg_nac("0");								canti = saldo_pleg_nac.toPlainString();							} else {								ave.setavesaldo_pleg_nac(Math.restar_bigdecimal(saldo_pleg_nac.toPlainString(), faltante.toPlainString()).toPlainString());								canti = faltante.toPlainString();							}							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), canti);							System.out.println("Va a tomar " + canti + "  de la averia " + ave.getavecodsx() + " de tipo plegadiza ");							resp &= grepd.crearreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx(), canti, "0", ave.getaveboddest(), ave.getaveposdest(), saldo, ave.getaveboddest(), ave.getaveposdest());							// la obtengo de una vez							reparacion_detalle repd = grepd.getreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx());							// actualizo el saldo en la NAC haciendo el update							resp &= gave.updateaveria(ave);							resp &= this.crearReparacion_nacdet(ave.getavecodsx(), gavenacdet, canti, grnacdet, repd);						}					}				} else {					// saldos NO NAC					// miro si va para pedido o despiece					if (desti.equals("PLEGADIZA")) {						// es para PEDIDO, solo tomara de saldo de plegadiza						Collection lista = gave.getlistaaveriaFifoReparacion(producto, saldo, desti);						Iterator ite = lista.iterator();						// ciclo para respaldar						String canti = "";						while (ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {							averia ave = (averia) ite.next();							BigDecimal saldo_pleg_nnac = new BigDecimal(ave.getavesaldo_pleg_nnac());							if (faltante.compareTo(saldo_pleg_nnac) > 0) {								ave.setavesaldo_pleg_nnac("0");								canti = saldo_pleg_nnac.toPlainString();							} else {								ave.setavesaldo_pleg_nnac(Math.restar_bigdecimal(saldo_pleg_nnac.toPlainString(), faltante.toPlainString()).toPlainString());								canti = faltante.toPlainString();							}							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), canti);							// creo la reparacion_detalle							resp &= grepd.crearreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx(), canti, "0", ave.getaveboddest(), ave.getaveposdest(), saldo, ave.getaveboddest(), ave.getaveposdest());							// actualizo el saldo en la NAC haciendo el update							resp &= gave.updateaveria(ave);						}					} else {						// es para DESPIECE, toma de saldo producto primero y luego de plegadiza						Collection lista = gave.getlistaaveriaFifoReparacion(producto, saldo, "DESPIECE");						Iterator ite = lista.iterator();						// ciclo para respaldar						String canti = "";						while (ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {							averia ave = (averia) ite.next();							BigDecimal saldo_prod_nnac = new BigDecimal(ave.getavesaldo_prod_nnac());							if (faltante.compareTo(saldo_prod_nnac) > 0) {								ave.setavesaldo_prod_nnac("0");								canti = saldo_prod_nnac.toPlainString();							} else {								ave.setavesaldo_prod_nnac(Math.restar_bigdecimal(saldo_prod_nnac.toPlainString(), faltante.toPlainString()).toPlainString());								canti = faltante.toPlainString();							}							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), canti);							resp &= grepd.crearreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx(), "0", canti, ave.getaveboddest(), ave.getaveposdest(), saldo, ave.getaveboddest(), ave.getaveposdest());							// actualizo el saldo en la NNAC haciendo el update							resp &= gave.updateaveria(ave);						}						// AHORA VOY A TOMAR DE SALDO DE PLEGADIZA						lista = gave.getlistaaveriaFifoReparacion(producto, saldo, "PLEGADIZA");						ite = lista.iterator();						// ciclo para respaldar						while (ite.hasNext() && faltante.compareTo(BigDecimal.ZERO) > 0) {							averia ave = (averia) ite.next();							BigDecimal saldo_pleg_nnac = new BigDecimal(ave.getavesaldo_pleg_nnac());							if (faltante.compareTo(saldo_pleg_nnac) > 0) {								ave.setavesaldo_pleg_nnac("0");								canti = saldo_pleg_nnac.toPlainString();							} else {								ave.setavesaldo_pleg_nnac(Math.restar_bigdecimal(saldo_pleg_nnac.toPlainString(), faltante.toPlainString()).toPlainString());								canti = faltante.toPlainString();							}							faltante = util.Math.restar_bigdecimal(faltante.toPlainString(), canti);							resp &= grepd.crearreparacion_detalle(rep.getrepcodsx(), producto, ave.getavecodsx(), canti, "0", ave.getaveboddest(), ave.getaveposdest(), saldo, ave.getaveboddest(), ave.getaveposdest());							// actualizo el saldo en la NAC haciendo el update							resp &= gave.updateaveria(ave);						}					}				}				String respaldado = util.Math.restar_bigdecimal(cantidad, faltante.toPlainString()).toPlainString();				mensaje = "Se respaldo un total de " + respaldado;			} catch (Exception ex) {				ex.printStackTrace();				resp = false;			}			if (resp)				db.commit();			else				db.rollback();			setPadre(rep.getrepcodsx(), request);		}		// OPCION DE set:		if (opcion.equals("set")) {			reparacion_detalle entity = control.getreparacion_detalle(request.getParameter("codsx"));			reparacion_detalleForm temp = new reparacion_detalleForm();			temp.setopcion("update");			temp.llenar(entity);			request.setAttribute("reparacion_detalleForm", temp);			destino = "reparacion_detalle_datos";		}		// opcion de CREAR		if (opcion.equals("crear")) {			String repdreparacion = _form.getrepdreparacion();			String repdproducto = _form.getrepdproducto();			String repdaveria = _form.getrepdaveria();			String repdcant_pleg = _form.getrepdcant_pleg();			String repdcant_prod = _form.getrepdcant_prod();			String repdbodega = _form.getrepdbodega();			String repdposicion = _form.getrepdposicion();			destino = "reparacion_detalle_datos";			try {				control.crearreparacion_detalle(repdreparacion, repdproducto, repdaveria, repdcant_pleg, repdcant_prod, repdbodega, repdposicion, "", repdbodega, repdposicion);				mensaje = "reparacion_detalle Creado con Exito";				reparacion_detalle entity = null; // control.getconcepto(llavanica);				reparacion_detalleForm temp = new reparacion_detalleForm();				temp.setopcion("update");				temp.llenar(entity);				request.setAttribute("reparacion_detalleForm", temp);			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Crear el reparacion_detalle: <br> " + e.getLocalizedMessage();			}		}		// Opcion de update		if (opcion.equals("update")) {			try {				destino = "reparacion_datos";				/**				 * al finalizar la reparacion es que muevo saldos, estos se moveran del lado de la base de datos, y cuando elimine un registro de la reparacion voy a sumar a la averia original				 */				control.updatereparacion_detalle(_form);				setPadre(_form.getrepdreparacion(), request);				mensaje = "reparacion_detalle Actualizado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Actualizar el reparacion_detalle: <br> " + e.getLocalizedMessage();			}		}		// Opcion de eliminar		if (opcion.equals("delete")) {			destino = "reparacion_datos";			String codsx = request.getParameter("codsx");			reparacion_detalle repd = control.getreparacion_detalle(codsx);			reparacion rep = new gstreparacion().getreparacion(repd.getrepdreparacion());			setPadre(rep.getrepcodsx(), request);			try {				control.eliminar(codsx);				mensaje = "reparacion_detalle Eliminado con Exito";			} catch (SQLException e) {				e.printStackTrace();				mensaje = "No se pudo Eliminar el reparacion_detalle: <br> " + e.getLocalizedMessage();			}		}		ActionMessages e = getErrors(request);		e.add("general", new ActionMessage(mensaje, false));		addErrors(request, e);		return mapping.findForward(destino);	}	private void setPadre(String codsx, HttpServletRequest request) {		reparacionForm pform = new reparacionForm();		gstreparacion grep = new gstreparacion();		reparacion rep = grep.getreparacion(codsx);		pform.llenar(rep);		pform.setopcion("update");		request.setAttribute("reparacionForm", pform);	}	private boolean crearReparacion_nacdet(String avecodsx, gstaveria_nacdet gavenacdet, String canti, gstreparacion_nacdet grnacdet, reparacion_detalle repd) throws SQLException {		boolean resp = true;		Collection avenacdets = gavenacdet.getlistaaveria_nacdetConSaldo(avecodsx);		Iterator ite_ndes = avenacdets.iterator();		BigDecimal sub_faltante = new BigDecimal(canti);		while (ite_ndes.hasNext() && sub_faltante.compareTo(BigDecimal.ZERO) > 0) {			averia_nacdet avendet = (averia_nacdet) ite_ndes.next();			BigDecimal saldo_avnd = new BigDecimal(avendet.getAvnsaldo());			String sub_canti = "0";			if (sub_faltante.compareTo(saldo_avnd) > 0) {				sub_canti = saldo_avnd.toPlainString();				sub_faltante = util.Math.restar_bigdecimal(sub_faltante.toPlainString(), sub_canti);				avendet.setAvnsaldo("0");			} else {// en una sola cantidad tengo todo				sub_canti = sub_faltante.toPlainString();				sub_faltante = BigDecimal.ZERO;				avendet.setAvnsaldo(Math.restar_bigdecimal(saldo_avnd.toPlainString(), sub_canti).toPlainString());			}			resp &= grnacdet.crearreparacion_nacdet(repd.getrepdcodsx(), avendet.getavnnacdet_or(), sub_canti, avendet.getavncodsx());			resp &= gavenacdet.updateaveria_nacdet(avendet);		}		return resp;	}}